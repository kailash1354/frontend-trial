import {
  PIE_CHART_PLUGINS,
  PieArc,
  PieArcLabel,
  PieArcLabelPlot,
  PieArcPlot,
  PieChart,
  PiePlot,
  getPercentageValue,
  getPieArcLabelUtilityClass,
  getPieArcUtilityClass,
  getPieCoordinates,
  pieArcClasses,
  pieArcLabelClasses,
  pieClasses,
  useIsItemFocusedGetter
} from "./chunk-PTYKCTEW.js";
import {
  AnimatedArea,
  AnimatedLine,
  AreaElement,
  AreaPlot,
  FocusedMark,
  LINE_CHART_PLUGINS,
  LineChart,
  LineElement,
  LineHighlightElement,
  LineHighlightPlot,
  LinePlot,
  MarkElement,
  MarkPlot,
  areaElementClasses,
  getAreaElementUtilityClass,
  getHighlightElementUtilityClass,
  getLineElementUtilityClass,
  getMarkElementUtilityClass,
  lineElementClasses,
  lineHighlightElementClasses,
  markElementClasses
} from "./chunk-ASRFN3NP.js";
import "./chunk-KUGHX7TM.js";
import {
  BAR_CHART_PLUGINS,
  BarChart,
  BarElement,
  BarLabel,
  BarPlot,
  barClasses,
  barElementClasses,
  barLabelClasses,
  getBarElementUtilityClass,
  getBarLabelUtilityClass,
  getBarUtilityClass,
  useUtilityClasses
} from "./chunk-TYKHJ5OE.js";
import {
  ChartsAxis,
  ChartsAxisHighlight,
  ChartsAxisHighlightPath,
  ChartsClipPath,
  ChartsGrid,
  ChartsText,
  ChartsXAxis,
  ChartsYAxis,
  axisClasses,
  chartsAxisHighlightClasses,
  chartsGridClasses,
  degToRad,
  getAxisHighlightUtilityClass,
  getAxisUtilityClass,
  getChartsGridUtilityClass,
  getDefaultBaseline,
  getDefaultTextAnchor
} from "./chunk-N4OPFIFV.js";
import {
  AXIS_LABEL_DEFAULT_HEIGHT,
  ChartDataProvider,
  ChartProvider,
  ChartsAxisTooltipContent,
  ChartsItemTooltipContent,
  ChartsLabel,
  ChartsLabelMark,
  ChartsLegend,
  ChartsLocalizationProvider,
  ChartsOverlay,
  ChartsSurface,
  ChartsTooltip,
  ChartsTooltipCell,
  ChartsTooltipContainer,
  ChartsTooltipPaper,
  ChartsTooltipRow,
  ChartsTooltipTable,
  ChartsWrapper,
  ContinuousColorLegend,
  DEFAULT_AXIS_SIZE_HEIGHT,
  DEFAULT_AXIS_SIZE_WIDTH,
  DEFAULT_MARGINS,
  DEFAULT_RADIUS_AXIS_KEY,
  DEFAULT_ROTATION_AXIS_KEY,
  DEFAULT_X_AXIS_KEY,
  DEFAULT_Y_AXIS_KEY,
  PiecewiseColorLegend,
  Toolbar,
  ToolbarButton,
  arc_default,
  bluePalette,
  bluePaletteDark,
  bluePaletteLight,
  blueberryTwilightPalette,
  blueberryTwilightPaletteDark,
  blueberryTwilightPaletteLight,
  chartsToolbarClasses,
  chartsTooltipClasses,
  cheerfulFiestaPalette,
  cheerfulFiestaPaletteDark,
  cheerfulFiestaPaletteLight,
  clampAngle,
  continuousColorLegendClasses,
  cyanPalette,
  cyanPaletteDark,
  cyanPaletteLight,
  defaultizeMargin,
  defaultizeValueFormatter,
  deg2rad,
  generateSvg2rotation,
  getAxisIndex,
  getChartsTooltipUtilityClass,
  getInteractionItemProps,
  getLabel,
  getSVGPoint,
  getValueToPositionMapper,
  greenPalette,
  greenPaletteDark,
  greenPaletteLight,
  isOrdinalScale,
  labelClasses,
  labelGradientClasses,
  labelMarkClasses,
  legendClasses,
  mangoFusionPalette,
  mangoFusionPaletteDark,
  mangoFusionPaletteLight,
  number_default,
  orangePalette,
  orangePaletteDark,
  orangePaletteLight,
  piecewiseColorDefaultLabelFormatter,
  piecewiseColorLegendClasses,
  pinkPalette,
  pinkPaletteDark,
  pinkPaletteLight,
  purplePalette,
  purplePaletteDark,
  purplePaletteLight,
  rad2deg,
  rainbowSurgePalette,
  rainbowSurgePaletteDark,
  rainbowSurgePaletteLight,
  redPalette,
  redPaletteDark,
  redPaletteLight,
  selectorBrushConfig,
  selectorBrushCurrentX,
  selectorBrushCurrentY,
  selectorBrushStartX,
  selectorBrushStartY,
  selectorChartDrawingArea,
  selectorChartIsSeriesFaded,
  selectorChartIsSeriesHighlighted,
  selectorChartPolarCenter,
  selectorChartSeriesHighlightedItem,
  selectorChartSeriesUnfadedItem,
  selectorChartsInteractionRotationAxisIndex,
  selectorChartsInteractionRotationAxisValue,
  selectorChartsIsVoronoiEnabled,
  seriesConfig,
  strawberrySkyPalette,
  strawberrySkyPaletteDark,
  strawberrySkyPaletteLight,
  useAnimate,
  useAnimateArea,
  useAnimateBar,
  useAnimateBarLabel,
  useAnimateLine,
  useAnimatePieArc,
  useAnimatePieArcLabel,
  useAxesTooltip,
  useAxisTooltip,
  useBarSeries,
  useBarSeriesContext,
  useBrush,
  useChartBrush,
  useChartCartesianAxis,
  useChartClosestPoint,
  useChartContainerProps,
  useChartContext,
  useChartGradientId,
  useChartGradientIdObjectBound,
  useChartHighlight,
  useChartId,
  useChartInteraction,
  useChartKeyboardNavigation,
  useChartPolarAxis,
  useChartRootRef,
  useChartZAxis,
  useChartsLocalization,
  useDrawingArea,
  useInteractionAllItemProps,
  useItemHighlighted,
  useItemHighlightedGetter,
  useItemTooltip,
  useLegend,
  useLineSeries,
  useLineSeriesContext,
  useMouseTracker,
  usePieSeries,
  usePieSeriesContext,
  useRadarItemTooltip,
  useRadarSeries,
  useRadarSeriesContext,
  useRadiusAxes,
  useRadiusAxis,
  useRadiusScale,
  useRotationAxes,
  useRotationAxis,
  useRotationScale,
  useScatterSeries,
  useScatterSeriesContext,
  useSelector,
  useSeries,
  useSkipAnimation,
  useStore,
  useSvgRef,
  useXAxes,
  useXAxis,
  useXColorScale,
  useXScale,
  useYAxes,
  useYAxis,
  useYColorScale,
  useYScale,
  useZAxes,
  useZAxis,
  useZColorScale,
  warnOnce,
  yellowPalette,
  yellowPaletteDark,
  yellowPaletteLight
} from "./chunk-5WQG27FY.js";
import {
  useSlotProps_default
} from "./chunk-Q4SOAMX6.js";
import {
  _objectWithoutPropertiesLoose
} from "./chunk-CDAIBWD5.js";
import "./chunk-BFXAAKVG.js";
import "./chunk-DKT3EHGO.js";
import {
  useThemeProps
} from "./chunk-PVRNBU6V.js";
import "./chunk-FKBYDBLZ.js";
import "./chunk-ZYQW2FS4.js";
import "./chunk-X34AUYXR.js";
import "./chunk-WUXTTJHK.js";
import {
  clsx,
  clsx_default,
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  require_prop_types,
  styled_default,
  useId,
  useTheme
} from "./chunk-ZRGPSJIV.js";
import "./chunk-TIPND57S.js";
import {
  _extends,
  init_extends
} from "./chunk-TRLI7EVB.js";
import "./chunk-DPOYXJEW.js";
import "./chunk-BY5XKTJS.js";
import {
  require_jsx_runtime
} from "./chunk-NRBATONI.js";
import "./chunk-FIVTYXJO.js";
import {
  require_react
} from "./chunk-QJTFJ6OV.js";
import {
  __toESM
} from "./chunk-V4OQ3NZ2.js";

// node_modules/@mui/x-charts/esm/context/useChartApiContext.js
var React = __toESM(require_react(), 1);
function useChartApiContext() {
  const {
    publicAPI
  } = useChartContext();
  const apiRef = React.useRef(publicAPI);
  React.useEffect(() => {
    apiRef.current = publicAPI;
  }, [publicAPI]);
  return apiRef;
}

// node_modules/@mui/x-charts/esm/models/seriesType/index.js
function isDefaultizedBarSeries(series) {
  return series.type === "bar";
}
function isBarSeries(series) {
  return series.type === "bar";
}

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsReferenceLine.js
init_extends();
var React4 = __toESM(require_react(), 1);
var import_prop_types3 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsXReferenceLine.js
init_extends();
var React2 = __toESM(require_react(), 1);
var import_prop_types = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/common.js
init_extends();

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/chartsReferenceLineClasses.js
function getReferenceLineUtilityClass(slot) {
  return generateUtilityClass("MuiChartsReferenceLine", slot);
}
var referenceLineClasses = generateUtilityClasses("MuiChartsReferenceLine", ["root", "vertical", "horizontal", "line", "label"]);

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/common.js
var DEFAULT_SPACING = 5;
var DEFAULT_SPACING_MIDDLE_OTHER_AXIS = 0;
var ReferenceLineRoot = styled_default("g")(({
  theme
}) => ({
  [`& .${referenceLineClasses.line}`]: {
    fill: "none",
    stroke: (theme.vars || theme).palette.text.primary,
    shapeRendering: "crispEdges",
    strokeWidth: 1,
    pointerEvents: "none"
  },
  [`& .${referenceLineClasses.label}`]: _extends({
    fill: (theme.vars || theme).palette.text.primary,
    stroke: "none",
    pointerEvents: "none",
    fontSize: 12
  }, theme.typography.body1)
}));

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsXReferenceLine.js
var import_jsx_runtime = __toESM(require_jsx_runtime(), 1);
var getTextParams = ({
  top,
  height,
  spacing,
  position,
  labelAlign = "middle"
}) => {
  const defaultSpacingOtherAxis = labelAlign === "middle" ? DEFAULT_SPACING_MIDDLE_OTHER_AXIS : DEFAULT_SPACING;
  const spacingX = (typeof spacing === "object" ? spacing.x : spacing) ?? DEFAULT_SPACING;
  const spacingY = (typeof spacing === "object" ? spacing.y : defaultSpacingOtherAxis) ?? defaultSpacingOtherAxis;
  switch (labelAlign) {
    case "start":
      return {
        x: position + spacingX,
        y: top + spacingY,
        style: {
          dominantBaseline: "hanging",
          textAnchor: "start"
        }
      };
    case "end":
      return {
        x: position + spacingX,
        y: top + height - spacingY,
        style: {
          dominantBaseline: "auto",
          textAnchor: "start"
        }
      };
    default:
      return {
        x: position + spacingX,
        y: top + height / 2 + spacingY,
        style: {
          dominantBaseline: "central",
          textAnchor: "start"
        }
      };
  }
};
function getXReferenceLineClasses(classes) {
  return composeClasses({
    root: ["root", "vertical"],
    line: ["line"],
    label: ["label"]
  }, getReferenceLineUtilityClass, classes);
}
function ChartsXReferenceLine(props) {
  const {
    x,
    label = "",
    spacing,
    classes: inClasses,
    labelAlign = "middle",
    lineStyle,
    labelStyle,
    axisId
  } = props;
  const {
    top,
    height
  } = useDrawingArea();
  const xAxisScale = useXScale(axisId);
  const xPosition = xAxisScale(x);
  if (xPosition === void 0) {
    if (true) {
      warnOnce(`MUI X Charts: the value ${x} does not exist in the data of x axis with id ${axisId}.`, "error");
    }
    return null;
  }
  const d = `M ${xPosition} ${top} l 0 ${height}`;
  const classes = getXReferenceLineClasses(inClasses);
  const textParams = _extends({
    text: label,
    fontSize: 12
  }, getTextParams({
    top,
    height,
    spacing,
    position: xPosition,
    labelAlign
  }), {
    className: classes.label
  });
  return (0, import_jsx_runtime.jsxs)(ReferenceLineRoot, {
    className: classes.root,
    children: [(0, import_jsx_runtime.jsx)("path", {
      d,
      className: classes.line,
      style: lineStyle
    }), (0, import_jsx_runtime.jsx)(ChartsText, _extends({}, textParams, {
      style: _extends({}, textParams.style, labelStyle)
    }))]
  });
}
true ? ChartsXReferenceLine.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The id of the axis used for the reference value.
   * @default The `id` of the first defined axis.
   */
  axisId: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.string]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types.default.object,
  /**
   * The label to display along the reference line.
   */
  label: import_prop_types.default.string,
  /**
   * The alignment if the label is in the chart drawing area.
   * @default 'middle'
   */
  labelAlign: import_prop_types.default.oneOf(["end", "middle", "start"]),
  /**
   * The style applied to the label.
   */
  labelStyle: import_prop_types.default.object,
  /**
   * The style applied to the line.
   */
  lineStyle: import_prop_types.default.object,
  /**
   * Additional space around the label in px.
   * Can be a number or an object `{ x, y }` to distinguish space with the reference line and space with axes.
   * @default 5
   */
  spacing: import_prop_types.default.oneOfType([import_prop_types.default.number, import_prop_types.default.shape({
    x: import_prop_types.default.number,
    y: import_prop_types.default.number
  })]),
  /**
   * The x value associated with the reference line.
   * If defined the reference line will be vertical.
   */
  x: import_prop_types.default.oneOfType([import_prop_types.default.instanceOf(Date), import_prop_types.default.number, import_prop_types.default.string]).isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsYReferenceLine.js
init_extends();
var React3 = __toESM(require_react(), 1);
var import_prop_types2 = __toESM(require_prop_types(), 1);
var import_jsx_runtime2 = __toESM(require_jsx_runtime(), 1);
var getTextParams2 = ({
  left,
  width,
  spacing,
  position,
  labelAlign = "middle"
}) => {
  const defaultSpacingOtherAxis = labelAlign === "middle" ? DEFAULT_SPACING_MIDDLE_OTHER_AXIS : DEFAULT_SPACING;
  const spacingX = (typeof spacing === "object" ? spacing.x : defaultSpacingOtherAxis) ?? defaultSpacingOtherAxis;
  const spacingY = (typeof spacing === "object" ? spacing.y : spacing) ?? DEFAULT_SPACING;
  switch (labelAlign) {
    case "start":
      return {
        y: position - spacingY,
        x: left + spacingX,
        style: {
          dominantBaseline: "auto",
          textAnchor: "start"
        }
      };
    case "end":
      return {
        y: position - spacingY,
        x: left + width - spacingX,
        style: {
          dominantBaseline: "auto",
          textAnchor: "end"
        }
      };
    default:
      return {
        y: position - spacingY,
        x: left + width / 2 + spacingX,
        style: {
          dominantBaseline: "auto",
          textAnchor: "middle"
        }
      };
  }
};
function getYReferenceLineClasses(classes) {
  return composeClasses({
    root: ["root", "horizontal"],
    line: ["line"],
    label: ["label"]
  }, getReferenceLineUtilityClass, classes);
}
function ChartsYReferenceLine(props) {
  const {
    y,
    label = "",
    spacing,
    classes: inClasses,
    labelAlign = "middle",
    lineStyle,
    labelStyle,
    axisId
  } = props;
  const {
    left,
    width
  } = useDrawingArea();
  const yAxisScale = useYScale(axisId);
  const yPosition = yAxisScale(y);
  if (yPosition === void 0) {
    if (true) {
      warnOnce(`MUI X Charts: the value ${y} does not exist in the data of y axis with id ${axisId}.`, "error");
    }
    return null;
  }
  const d = `M ${left} ${yPosition} l ${width} 0`;
  const classes = getYReferenceLineClasses(inClasses);
  const textParams = _extends({
    text: label,
    fontSize: 12
  }, getTextParams2({
    left,
    width,
    spacing,
    position: yPosition,
    labelAlign
  }), {
    className: classes.label
  });
  return (0, import_jsx_runtime2.jsxs)(ReferenceLineRoot, {
    className: classes.root,
    children: [(0, import_jsx_runtime2.jsx)("path", {
      d,
      className: classes.line,
      style: lineStyle
    }), (0, import_jsx_runtime2.jsx)(ChartsText, _extends({}, textParams, {
      style: _extends({}, textParams.style, labelStyle)
    }))]
  });
}
true ? ChartsYReferenceLine.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The id of the axis used for the reference value.
   * @default The `id` of the first defined axis.
   */
  axisId: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.string]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types2.default.object,
  /**
   * The label to display along the reference line.
   */
  label: import_prop_types2.default.string,
  /**
   * The alignment if the label is in the chart drawing area.
   * @default 'middle'
   */
  labelAlign: import_prop_types2.default.oneOf(["end", "middle", "start"]),
  /**
   * The style applied to the label.
   */
  labelStyle: import_prop_types2.default.object,
  /**
   * The style applied to the line.
   */
  lineStyle: import_prop_types2.default.object,
  /**
   * Additional space around the label in px.
   * Can be a number or an object `{ x, y }` to distinguish space with the reference line and space with axes.
   * @default 5
   */
  spacing: import_prop_types2.default.oneOfType([import_prop_types2.default.number, import_prop_types2.default.shape({
    x: import_prop_types2.default.number,
    y: import_prop_types2.default.number
  })]),
  /**
   * The y value associated with the reference line.
   * If defined the reference line will be horizontal.
   */
  y: import_prop_types2.default.oneOfType([import_prop_types2.default.instanceOf(Date), import_prop_types2.default.number, import_prop_types2.default.string]).isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsReferenceLine/ChartsReferenceLine.js
var import_jsx_runtime3 = __toESM(require_jsx_runtime(), 1);
function ChartsReferenceLine(props) {
  const {
    x,
    y
  } = props;
  if (x !== void 0 && y !== void 0) {
    throw new Error("MUI X Charts: The ChartsReferenceLine cannot have both `x` and `y` props set.");
  }
  if (x === void 0 && y === void 0) {
    throw new Error("MUI X Charts: The ChartsReferenceLine should have a value in `x` or `y` prop.");
  }
  if (x !== void 0) {
    return (0, import_jsx_runtime3.jsx)(ChartsXReferenceLine, _extends({}, props));
  }
  return (0, import_jsx_runtime3.jsx)(ChartsYReferenceLine, _extends({}, props));
}
true ? ChartsReferenceLine.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The id of the axis used for the reference value.
   * @default The `id` of the first defined axis.
   */
  axisId: import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.string]),
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types3.default.object,
  /**
   * The label to display along the reference line.
   */
  label: import_prop_types3.default.string,
  /**
   * The alignment if the label is in the chart drawing area.
   * @default 'middle'
   */
  labelAlign: import_prop_types3.default.oneOf(["end", "middle", "start"]),
  /**
   * The style applied to the label.
   */
  labelStyle: import_prop_types3.default.object,
  /**
   * The style applied to the line.
   */
  lineStyle: import_prop_types3.default.object,
  /**
   * Additional space around the label in px.
   * Can be a number or an object `{ x, y }` to distinguish space with the reference line and space with axes.
   * @default { x: 0, y: 5 } on a horizontal line and { x: 5, y: 0 } on a vertical line.
   */
  spacing: import_prop_types3.default.oneOfType([import_prop_types3.default.number, import_prop_types3.default.shape({
    x: import_prop_types3.default.number,
    y: import_prop_types3.default.number
  })]),
  /**
   * The x value associated with the reference line.
   * If defined the reference line will be vertical.
   */
  x: import_prop_types3.default.oneOfType([import_prop_types3.default.instanceOf(Date), import_prop_types3.default.number, import_prop_types3.default.string]),
  /**
   * The y value associated with the reference line.
   * If defined the reference line will be horizontal.
   */
  y: import_prop_types3.default.oneOfType([import_prop_types3.default.instanceOf(Date), import_prop_types3.default.number, import_prop_types3.default.string])
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterChart.js
init_extends();
var React11 = __toESM(require_react(), 1);
var import_prop_types7 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterPlot.js
init_extends();
var React9 = __toESM(require_react(), 1);
var import_prop_types6 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ScatterChart/Scatter.js
init_extends();
var React7 = __toESM(require_react(), 1);
var import_prop_types5 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterMarker.js
init_extends();
var React5 = __toESM(require_react(), 1);
var import_prop_types4 = __toESM(require_prop_types(), 1);
var import_jsx_runtime4 = __toESM(require_jsx_runtime(), 1);
var _excluded = ["seriesId", "isFaded", "isHighlighted", "x", "y", "color", "size", "dataIndex"];
function ScatterMarker(props) {
  const {
    isFaded,
    isHighlighted,
    x,
    y,
    color,
    size
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
  return (0, import_jsx_runtime4.jsx)("circle", _extends({
    cx: 0,
    cy: 0,
    r: (isHighlighted ? 1.2 : 1) * size,
    transform: `translate(${x}, ${y})`,
    fill: color,
    opacity: isFaded ? 0.3 : 1,
    cursor: other.onClick ? "pointer" : "unset"
  }, other));
}
true ? ScatterMarker.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The fill color of the marker.
   */
  color: import_prop_types4.default.string.isRequired,
  /**
   * The index of the data point.
   */
  dataIndex: import_prop_types4.default.number.isRequired,
  /**
   * If `true`, the marker is faded.
   */
  isFaded: import_prop_types4.default.bool.isRequired,
  /**
   * If `true`, the marker is highlighted.
   */
  isHighlighted: import_prop_types4.default.bool.isRequired,
  /**
   * Callback fired when clicking on a scatter item.
   * @param {MouseEvent} event Mouse event recorded on the `<svg/>` element.
   */
  onClick: import_prop_types4.default.func,
  /**
   * The series ID.
   */
  seriesId: import_prop_types4.default.oneOfType([import_prop_types4.default.number, import_prop_types4.default.string]).isRequired,
  /**
   * The size of the marker.
   */
  size: import_prop_types4.default.number.isRequired,
  /**
   * The x coordinate of the data point.
   */
  x: import_prop_types4.default.number.isRequired,
  /**
   * The y coordinate of the data point.
   */
  y: import_prop_types4.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/scatterClasses.js
function getScatterUtilityClass(slot) {
  return generateUtilityClass("MuiScatter", slot);
}
var scatterClasses = generateUtilityClasses("MuiScatter", ["root"]);
var useUtilityClasses2 = (classes) => {
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getScatterUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/ScatterChart/useScatterPlotData.js
var React6 = __toESM(require_react(), 1);
function useScatterPlotData(series, xScale, yScale, isPointInside) {
  return React6.useMemo(() => {
    const getXPosition = getValueToPositionMapper(xScale);
    const getYPosition = getValueToPositionMapper(yScale);
    const temp = [];
    for (let i = 0; i < series.data.length; i += 1) {
      const scatterPoint = series.data[i];
      const x = getXPosition(scatterPoint.x);
      const y = getYPosition(scatterPoint.y);
      const isInRange = isPointInside(x, y);
      if (isInRange) {
        temp.push({
          x,
          y,
          id: scatterPoint.id,
          seriesId: series.id,
          type: "scatter",
          dataIndex: i
        });
      }
    }
    return temp;
  }, [xScale, yScale, series.data, series.id, isPointInside]);
}

// node_modules/@mui/x-charts/esm/ScatterChart/Scatter.js
var import_jsx_runtime5 = __toESM(require_jsx_runtime(), 1);
var _excluded2 = ["ownerState"];
function Scatter(props) {
  const {
    series,
    xScale,
    yScale,
    color,
    colorGetter,
    onItemClick,
    classes: inClasses,
    slots,
    slotProps
  } = props;
  const {
    instance
  } = useChartContext();
  const store = useStore();
  const isVoronoiEnabled = useSelector(store, selectorChartsIsVoronoiEnabled);
  const skipInteractionHandlers = isVoronoiEnabled || series.disableHover;
  const {
    isFaded,
    isHighlighted
  } = useItemHighlightedGetter();
  const isFocused = useIsItemFocusedGetter();
  const scatterPlotData = useScatterPlotData(series, xScale, yScale, instance.isPointInside);
  const Marker = slots?.marker ?? ScatterMarker;
  const _useSlotProps = useSlotProps_default({
    elementType: Marker,
    externalSlotProps: slotProps?.marker,
    additionalProps: {
      seriesId: series.id,
      size: series.markerSize
    },
    ownerState: {}
  }), markerProps = _objectWithoutPropertiesLoose(_useSlotProps, _excluded2);
  const classes = useUtilityClasses2(inClasses);
  return (0, import_jsx_runtime5.jsx)("g", {
    "data-series": series.id,
    className: classes.root,
    children: scatterPlotData.map((dataPoint) => {
      const isItemHighlighted = isHighlighted(dataPoint);
      const isItemFaded = !isItemHighlighted && isFaded(dataPoint);
      const isItemFocused = isFocused({
        seriesType: "scatter",
        seriesId: series.id,
        dataIndex: dataPoint.dataIndex
      });
      return (0, import_jsx_runtime5.jsx)(Marker, _extends({
        dataIndex: dataPoint.dataIndex,
        color: colorGetter ? colorGetter(dataPoint.dataIndex) : color,
        isHighlighted: isItemHighlighted,
        isFaded: isItemFaded,
        x: dataPoint.x,
        y: dataPoint.y,
        onClick: onItemClick && ((event) => onItemClick(event, {
          type: "scatter",
          seriesId: series.id,
          dataIndex: dataPoint.dataIndex
        })),
        "data-highlighted": isItemHighlighted || void 0,
        "data-faded": isItemFaded || void 0,
        "data-focused": isItemFocused || void 0
      }, skipInteractionHandlers ? void 0 : getInteractionItemProps(instance, dataPoint), markerProps), dataPoint.id ?? dataPoint.dataIndex);
    })
  });
}
true ? Scatter.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  classes: import_prop_types5.default.object,
  color: import_prop_types5.default.string.isRequired,
  colorGetter: import_prop_types5.default.func,
  /**
   * Callback fired when clicking on a scatter item.
   * @param {MouseEvent} event Mouse event recorded on the `<svg/>` element.
   * @param {ScatterItemIdentifier} scatterItemIdentifier The scatter item identifier.
   */
  onItemClick: import_prop_types5.default.func,
  series: import_prop_types5.default.object.isRequired,
  slotProps: import_prop_types5.default.object,
  slots: import_prop_types5.default.object,
  xScale: import_prop_types5.default.func.isRequired,
  yScale: import_prop_types5.default.func.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/BatchScatter.js
var React8 = __toESM(require_react(), 1);
var import_jsx_runtime6 = __toESM(require_jsx_runtime(), 1);
var MAX_POINTS_PER_PATH = 1e3;
var ALMOST_ZERO = 0.01;
function appendAtKey(map, key, value) {
  let bucket = map.get(key);
  if (!bucket) {
    bucket = [value];
    map.set(key, bucket);
  } else {
    bucket.push(value);
  }
  return bucket;
}
function createPath(x, y, markerSize) {
  return `M${x - markerSize} ${y} a${markerSize} ${markerSize} 0 1 1 0 ${ALMOST_ZERO}`;
}
function useCreatePaths(seriesData, markerSize, xScale, yScale, color, colorGetter) {
  const {
    instance
  } = useChartContext();
  const getXPosition = getValueToPositionMapper(xScale);
  const getYPosition = getValueToPositionMapper(yScale);
  const paths = /* @__PURE__ */ new Map();
  const temporaryPaths = /* @__PURE__ */ new Map();
  for (let i = 0; i < seriesData.length; i += 1) {
    const scatterPoint = seriesData[i];
    const x = getXPosition(scatterPoint.x);
    const y = getYPosition(scatterPoint.y);
    if (!instance.isPointInside(x, y)) {
      continue;
    }
    const path = createPath(x, y, markerSize);
    const fill = colorGetter ? colorGetter(i) : color;
    const tempPath = appendAtKey(temporaryPaths, fill, path);
    if (tempPath.length >= MAX_POINTS_PER_PATH) {
      appendAtKey(paths, fill, tempPath.join(""));
      temporaryPaths.delete(fill);
    }
  }
  for (const [fill, tempPath] of temporaryPaths.entries()) {
    if (tempPath.length > 0) {
      appendAtKey(paths, fill, tempPath.join(""));
    }
  }
  return paths;
}
function BatchScatterPaths(props) {
  const {
    series,
    xScale,
    yScale,
    color,
    colorGetter,
    markerSize
  } = props;
  const paths = useCreatePaths(series.data, markerSize, xScale, yScale, color, colorGetter);
  const children = [];
  let i = 0;
  for (const [fill, dArray] of paths.entries()) {
    for (const d of dArray) {
      children.push((0, import_jsx_runtime6.jsx)("path", {
        fill,
        d
      }, i));
      i += 1;
    }
  }
  return (0, import_jsx_runtime6.jsx)(React8.Fragment, {
    children
  });
}
var MemoBatchScatterPaths = React8.memo(BatchScatterPaths);
if (true) MemoBatchScatterPaths.displayName = "MemoBatchScatterPaths";
var Group = styled_default("g")({
  '&[data-faded="true"]': {
    opacity: 0.3
  },
  "& path": {
    /* The browser must do hit testing to know which element a pointer is interacting with.
     * With many data points, we create many paths causing significant time to be spent in the hit test phase.
     * To fix this issue, we disable pointer events for the descendant paths.
     *
     * Ideally, users should be able to override this in case they need pointer events to be enabled,
     * but it can affect performance negatively, especially with many data points. */
    pointerEvents: "none"
  }
});
function BatchScatter(props) {
  const {
    series,
    xScale,
    yScale,
    color,
    colorGetter,
    classes: inClasses
  } = props;
  const {
    store
  } = useChartContext();
  const isSeriesHighlighted = useSelector(store, selectorChartIsSeriesHighlighted, [series.id]);
  const isSeriesFaded = useSelector(store, selectorChartIsSeriesFaded, [series.id]);
  const seriesHighlightedItem = useSelector(store, selectorChartSeriesHighlightedItem, [series.id]);
  const seriesUnfadedItem = useSelector(store, selectorChartSeriesUnfadedItem, [series.id]);
  const highlightedModifier = 1.2;
  const markerSize = series.markerSize * (isSeriesHighlighted ? highlightedModifier : 1);
  const classes = useUtilityClasses2(inClasses);
  const siblings = [];
  if (seriesHighlightedItem != null) {
    const datum = series.data[seriesHighlightedItem];
    const getXPosition = getValueToPositionMapper(xScale);
    const getYPosition = getValueToPositionMapper(yScale);
    siblings.push((0, import_jsx_runtime6.jsx)("path", {
      fill: colorGetter ? colorGetter(seriesHighlightedItem) : color,
      "data-highlighted": true,
      d: createPath(getXPosition(datum.x), getYPosition(datum.y), markerSize * highlightedModifier)
    }, `highlighted-${series.id}`));
  }
  if (seriesUnfadedItem != null) {
    const datum = series.data[seriesUnfadedItem];
    const getXPosition = getValueToPositionMapper(xScale);
    const getYPosition = getValueToPositionMapper(yScale);
    siblings.push((0, import_jsx_runtime6.jsx)("path", {
      fill: colorGetter ? colorGetter(seriesUnfadedItem) : color,
      d: createPath(getXPosition(datum.x), getYPosition(datum.y), markerSize)
    }, `unfaded-${series.id}`));
  }
  return (0, import_jsx_runtime6.jsxs)(React8.Fragment, {
    children: [(0, import_jsx_runtime6.jsx)(Group, {
      className: classes.root,
      "data-series": series.id,
      "data-faded": isSeriesFaded || void 0,
      "data-highlighted": isSeriesHighlighted || void 0,
      children: (0, import_jsx_runtime6.jsx)(MemoBatchScatterPaths, {
        series,
        xScale,
        yScale,
        color,
        colorGetter,
        markerSize
      })
    }), siblings]
  });
}

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterPlot.js
var import_jsx_runtime7 = __toESM(require_jsx_runtime(), 1);
function ScatterPlot(props) {
  const {
    slots,
    slotProps,
    onItemClick,
    renderer
  } = props;
  const seriesData = useScatterSeriesContext();
  const {
    xAxis,
    xAxisIds
  } = useXAxes();
  const {
    yAxis,
    yAxisIds
  } = useYAxes();
  const {
    zAxis,
    zAxisIds
  } = useZAxes();
  if (seriesData === void 0) {
    return null;
  }
  const {
    series,
    seriesOrder
  } = seriesData;
  const defaultXAxisId = xAxisIds[0];
  const defaultYAxisId = yAxisIds[0];
  const defaultZAxisId = zAxisIds[0];
  const DefaultScatterItems = renderer === "svg-batch" ? BatchScatter : Scatter;
  const ScatterItems = slots?.scatter ?? DefaultScatterItems;
  return (0, import_jsx_runtime7.jsx)(React9.Fragment, {
    children: seriesOrder.map((seriesId) => {
      const {
        id,
        xAxisId,
        yAxisId,
        zAxisId,
        color
      } = series[seriesId];
      const colorGetter = seriesConfig.colorProcessor(series[seriesId], xAxis[xAxisId ?? defaultXAxisId], yAxis[yAxisId ?? defaultYAxisId], zAxis[zAxisId ?? defaultZAxisId]);
      const xScale = xAxis[xAxisId ?? defaultXAxisId].scale;
      const yScale = yAxis[yAxisId ?? defaultYAxisId].scale;
      return (0, import_jsx_runtime7.jsx)(ScatterItems, _extends({
        xScale,
        yScale,
        color,
        colorGetter,
        series: series[seriesId],
        onItemClick,
        slots,
        slotProps
      }, slotProps?.scatter), id);
    })
  });
}
true ? ScatterPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Callback fired when clicking on a scatter item.
   * @param {MouseEvent} event Mouse event recorded on the `<svg/>` element.
   * @param {ScatterItemIdentifier} scatterItemIdentifier The scatter item identifier.
   */
  onItemClick: import_prop_types6.default.func,
  /**
   * The type of renderer to use for the scatter plot.
   * - `svg-single`: Renders every scatter item in a `<circle />` element.
   * - `svg-batch`: Batch renders scatter items in `<path />` elements for better performance with large datasets, at the cost of some limitations.
   *                Read more: https://mui.com/x/react-charts/scatter/#performance
   *
   * @default 'svg-single'
   */
  renderer: import_prop_types6.default.oneOf(["svg-batch", "svg-single"]),
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types6.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types6.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/ScatterChart/useScatterChartProps.js
init_extends();
var React10 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterChart.plugins.js
var SCATTER_CHART_PLUGINS = [useChartZAxis, useChartBrush, useChartCartesianAxis, useChartInteraction, useChartHighlight, useChartClosestPoint, useChartKeyboardNavigation];

// node_modules/@mui/x-charts/esm/ScatterChart/useScatterChartProps.js
var _excluded3 = ["xAxis", "yAxis", "zAxis", "series", "axisHighlight", "voronoiMaxRadius", "disableVoronoi", "hideLegend", "width", "height", "margin", "colors", "sx", "grid", "onItemClick", "children", "slots", "slotProps", "loading", "highlightedItem", "onHighlightChange", "className", "showToolbar", "renderer", "brushConfig"];
var useScatterChartProps = (props) => {
  const {
    xAxis,
    yAxis,
    zAxis,
    series,
    axisHighlight,
    voronoiMaxRadius,
    disableVoronoi,
    width,
    height,
    margin,
    colors,
    sx,
    grid,
    onItemClick,
    children,
    slots,
    slotProps,
    loading,
    highlightedItem,
    onHighlightChange,
    className,
    renderer,
    brushConfig
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded3);
  const seriesWithDefault = React10.useMemo(() => series.map((s) => _extends({
    type: "scatter"
  }, s)), [series]);
  const useVoronoiOnItemClick = disableVoronoi !== true || renderer === "svg-batch";
  const chartContainerProps = _extends({}, other, {
    series: seriesWithDefault,
    width,
    height,
    margin,
    colors,
    xAxis,
    yAxis,
    zAxis,
    highlightedItem,
    onHighlightChange,
    disableVoronoi,
    voronoiMaxRadius,
    onItemClick: useVoronoiOnItemClick ? onItemClick : void 0,
    className,
    plugins: SCATTER_CHART_PLUGINS,
    slots,
    slotProps,
    brushConfig
  });
  const chartsAxisProps = {
    slots,
    slotProps
  };
  const gridProps = {
    vertical: grid?.vertical,
    horizontal: grid?.horizontal
  };
  const scatterPlotProps = {
    onItemClick: useVoronoiOnItemClick ? void 0 : onItemClick,
    slots,
    slotProps,
    renderer
  };
  const overlayProps = {
    loading,
    slots,
    slotProps
  };
  const legendProps = {
    slots,
    slotProps
  };
  const axisHighlightProps = _extends({
    y: "none",
    x: "none"
  }, axisHighlight);
  const chartsWrapperProps = {
    sx,
    legendPosition: props.slotProps?.legend?.position,
    legendDirection: props.slotProps?.legend?.direction,
    hideLegend: props.hideLegend ?? false
  };
  return {
    chartsWrapperProps,
    chartContainerProps,
    chartsAxisProps,
    gridProps,
    scatterPlotProps,
    overlayProps,
    legendProps,
    axisHighlightProps,
    children
  };
};

// node_modules/@mui/x-charts/esm/ScatterChart/ScatterChart.js
var import_jsx_runtime8 = __toESM(require_jsx_runtime(), 1);
var ScatterChart = React11.forwardRef(function ScatterChart2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiScatterChart"
  });
  const {
    chartsWrapperProps,
    chartContainerProps,
    chartsAxisProps,
    gridProps,
    scatterPlotProps,
    overlayProps,
    legendProps,
    axisHighlightProps,
    children
  } = useScatterChartProps(props);
  const {
    chartDataProviderProps,
    chartsSurfaceProps
  } = useChartContainerProps(chartContainerProps, ref);
  const Tooltip = props.slots?.tooltip ?? ChartsTooltip;
  const Toolbar2 = props.slots?.toolbar;
  return (0, import_jsx_runtime8.jsx)(ChartDataProvider, _extends({}, chartDataProviderProps, {
    children: (0, import_jsx_runtime8.jsxs)(ChartsWrapper, _extends({}, chartsWrapperProps, {
      children: [props.showToolbar && Toolbar2 ? (0, import_jsx_runtime8.jsx)(Toolbar2, _extends({}, props.slotProps?.toolbar)) : null, !props.hideLegend && (0, import_jsx_runtime8.jsx)(ChartsLegend, _extends({}, legendProps)), (0, import_jsx_runtime8.jsxs)(ChartsSurface, _extends({}, chartsSurfaceProps, {
        children: [(0, import_jsx_runtime8.jsx)(ChartsAxis, _extends({}, chartsAxisProps)), (0, import_jsx_runtime8.jsx)(ChartsGrid, _extends({}, gridProps)), (0, import_jsx_runtime8.jsx)("g", {
          "data-drawing-container": true,
          children: (0, import_jsx_runtime8.jsx)(ScatterPlot, _extends({}, scatterPlotProps))
        }), (0, import_jsx_runtime8.jsx)(ChartsOverlay, _extends({}, overlayProps)), (0, import_jsx_runtime8.jsx)(ChartsAxisHighlight, _extends({}, axisHighlightProps)), children]
      })), !props.loading && (0, import_jsx_runtime8.jsx)(Tooltip, _extends({
        trigger: "item"
      }, props.slotProps?.tooltip))]
    }))
  }));
});
if (true) ScatterChart.displayName = "ScatterChart";
true ? ScatterChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types7.default.shape({
    current: import_prop_types7.default.object
  }),
  /**
   * The configuration of axes highlight.
   * @see See {@link https://mui.com/x/react-charts/highlighting/ highlighting docs} for more details.
   * @default { x: 'none', y: 'none' }
   */
  axisHighlight: import_prop_types7.default.shape({
    x: import_prop_types7.default.oneOf(["band", "line", "none"]),
    y: import_prop_types7.default.oneOf(["band", "line", "none"])
  }),
  /**
   * Configuration for the brush interaction.
   */
  brushConfig: import_prop_types7.default.shape({
    enabled: import_prop_types7.default.bool,
    preventHighlight: import_prop_types7.default.bool,
    preventTooltip: import_prop_types7.default.bool
  }),
  children: import_prop_types7.default.node,
  className: import_prop_types7.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string), import_prop_types7.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types7.default.arrayOf(import_prop_types7.default.object),
  desc: import_prop_types7.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types7.default.bool,
  /**
   * If true, the interaction will not use the Voronoi cell and fall back to hover events.
   * @default false
   */
  disableVoronoi: import_prop_types7.default.bool,
  enableKeyboardNavigation: import_prop_types7.default.bool,
  /**
   * Option to display a cartesian grid in the background.
   */
  grid: import_prop_types7.default.shape({
    horizontal: import_prop_types7.default.bool,
    vertical: import_prop_types7.default.bool
  }),
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types7.default.number,
  /**
   * If `true`, the legend is not rendered.
   */
  hideLegend: import_prop_types7.default.bool,
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types7.default.shape({
    dataIndex: import_prop_types7.default.number,
    seriesId: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types7.default.string,
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types7.default.bool,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types7.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.shape({
    bottom: import_prop_types7.default.number,
    left: import_prop_types7.default.number,
    right: import_prop_types7.default.number,
    top: import_prop_types7.default.number
  })]),
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | ChartsAxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types7.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types7.default.func,
  /**
   * Callback fired when clicking on a scatter item.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element if using Voronoi cells. Or the Mouse event from the scatter element, when `disableVoronoi=true`.
   * @param {ScatterItemIdentifier} scatterItemIdentifier The scatter item identifier.
   */
  onItemClick: import_prop_types7.default.func,
  /**
   * The type of renderer to use for the scatter plot.
   * - `svg-single`: Renders every scatter item in a `<circle />` element.
   * - `svg-batch`: Batch renders scatter items in `<path />` elements for better performance with large datasets, at the cost of some limitations.
   *                Read more: https://mui.com/x/react-charts/scatter/#performance
   *
   * @default 'svg-single'
   */
  renderer: import_prop_types7.default.oneOf(["svg-batch", "svg-single"]),
  /**
   * The series to display in the scatter chart.
   * An array of [[ScatterSeries]] objects.
   */
  series: import_prop_types7.default.arrayOf(import_prop_types7.default.object).isRequired,
  /**
   * If true, shows the default chart toolbar.
   * @default false
   */
  showToolbar: import_prop_types7.default.bool,
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types7.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types7.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types7.default.object,
  sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
  theme: import_prop_types7.default.oneOf(["dark", "light"]),
  title: import_prop_types7.default.string,
  /**
   * Defines the maximum distance between a scatter point and the pointer that triggers the interaction.
   * If set to `'item'`, the radius is the `markerSize`.
   * If `undefined`, the radius is assumed to be infinite.
   */
  voronoiMaxRadius: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["item"]), import_prop_types7.default.number]),
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types7.default.number,
  /**
   * The configuration of the x-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  xAxis: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["x"]),
    barGapRatio: import_prop_types7.default.number,
    categoryGapRatio: import_prop_types7.default.number,
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      type: import_prop_types7.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types7.default.string,
      values: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number, import_prop_types7.default.string]).isRequired)
    }), import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    groups: import_prop_types7.default.arrayOf(import_prop_types7.default.shape({
      getValue: import_prop_types7.default.func.isRequired,
      tickLabelStyle: import_prop_types7.default.object,
      tickSize: import_prop_types7.default.number
    })),
    height: import_prop_types7.default.number,
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["band"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelMinGap: import_prop_types7.default.number,
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["x"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      type: import_prop_types7.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types7.default.string,
      values: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number, import_prop_types7.default.string]).isRequired)
    }), import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    groups: import_prop_types7.default.arrayOf(import_prop_types7.default.shape({
      getValue: import_prop_types7.default.func.isRequired,
      tickLabelStyle: import_prop_types7.default.object,
      tickSize: import_prop_types7.default.number
    })),
    height: import_prop_types7.default.number,
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["point"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelMinGap: import_prop_types7.default.number,
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["x"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    height: import_prop_types7.default.number,
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    max: import_prop_types7.default.number,
    min: import_prop_types7.default.number,
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["log"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelMinGap: import_prop_types7.default.number,
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["x"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    constant: import_prop_types7.default.number,
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    height: import_prop_types7.default.number,
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    max: import_prop_types7.default.number,
    min: import_prop_types7.default.number,
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["symlog"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelMinGap: import_prop_types7.default.number,
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["x"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    height: import_prop_types7.default.number,
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    max: import_prop_types7.default.number,
    min: import_prop_types7.default.number,
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["pow"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelMinGap: import_prop_types7.default.number,
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["x"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    height: import_prop_types7.default.number,
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    max: import_prop_types7.default.number,
    min: import_prop_types7.default.number,
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["sqrt"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelMinGap: import_prop_types7.default.number,
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["x"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    height: import_prop_types7.default.number,
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    max: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.shape({
      valueOf: import_prop_types7.default.func.isRequired
    })]),
    min: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.shape({
      valueOf: import_prop_types7.default.func.isRequired
    })]),
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["time"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelMinGap: import_prop_types7.default.number,
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["x"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    height: import_prop_types7.default.number,
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    max: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.shape({
      valueOf: import_prop_types7.default.func.isRequired
    })]),
    min: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.shape({
      valueOf: import_prop_types7.default.func.isRequired
    })]),
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["utc"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelMinGap: import_prop_types7.default.number,
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["x"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    height: import_prop_types7.default.number,
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    max: import_prop_types7.default.number,
    min: import_prop_types7.default.number,
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["linear"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelMinGap: import_prop_types7.default.number,
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func
  })]).isRequired),
  /**
   * The configuration of the y-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  yAxis: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["y"]),
    barGapRatio: import_prop_types7.default.number,
    categoryGapRatio: import_prop_types7.default.number,
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      type: import_prop_types7.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types7.default.string,
      values: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number, import_prop_types7.default.string]).isRequired)
    }), import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    groups: import_prop_types7.default.arrayOf(import_prop_types7.default.shape({
      getValue: import_prop_types7.default.func.isRequired,
      tickLabelStyle: import_prop_types7.default.object,
      tickSize: import_prop_types7.default.number
    })),
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["band"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func,
    width: import_prop_types7.default.number
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["y"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      type: import_prop_types7.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types7.default.string,
      values: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number, import_prop_types7.default.string]).isRequired)
    }), import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    groups: import_prop_types7.default.arrayOf(import_prop_types7.default.shape({
      getValue: import_prop_types7.default.func.isRequired,
      tickLabelStyle: import_prop_types7.default.object,
      tickSize: import_prop_types7.default.number
    })),
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["point"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func,
    width: import_prop_types7.default.number
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["y"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    max: import_prop_types7.default.number,
    min: import_prop_types7.default.number,
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["log"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func,
    width: import_prop_types7.default.number
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["y"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    constant: import_prop_types7.default.number,
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    max: import_prop_types7.default.number,
    min: import_prop_types7.default.number,
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["symlog"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func,
    width: import_prop_types7.default.number
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["y"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    max: import_prop_types7.default.number,
    min: import_prop_types7.default.number,
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["pow"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func,
    width: import_prop_types7.default.number
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["y"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    max: import_prop_types7.default.number,
    min: import_prop_types7.default.number,
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["sqrt"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func,
    width: import_prop_types7.default.number
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["y"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    max: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.shape({
      valueOf: import_prop_types7.default.func.isRequired
    })]),
    min: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.shape({
      valueOf: import_prop_types7.default.func.isRequired
    })]),
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["time"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func,
    width: import_prop_types7.default.number
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["y"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    max: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.shape({
      valueOf: import_prop_types7.default.func.isRequired
    })]),
    min: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.shape({
      valueOf: import_prop_types7.default.func.isRequired
    })]),
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["utc"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func,
    width: import_prop_types7.default.number
  }), import_prop_types7.default.shape({
    axis: import_prop_types7.default.oneOf(["y"]),
    classes: import_prop_types7.default.object,
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    disableLine: import_prop_types7.default.bool,
    disableTicks: import_prop_types7.default.bool,
    domainLimit: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["nice", "strict"]), import_prop_types7.default.func]),
    hideTooltip: import_prop_types7.default.bool,
    id: import_prop_types7.default.oneOfType([import_prop_types7.default.number, import_prop_types7.default.string]),
    ignoreTooltip: import_prop_types7.default.bool,
    label: import_prop_types7.default.string,
    labelStyle: import_prop_types7.default.object,
    max: import_prop_types7.default.number,
    min: import_prop_types7.default.number,
    offset: import_prop_types7.default.number,
    position: import_prop_types7.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types7.default.bool,
    scaleType: import_prop_types7.default.oneOf(["linear"]),
    slotProps: import_prop_types7.default.object,
    slots: import_prop_types7.default.object,
    sx: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.func, import_prop_types7.default.object, import_prop_types7.default.bool])), import_prop_types7.default.func, import_prop_types7.default.object]),
    tickInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.array, import_prop_types7.default.func]),
    tickLabelInterval: import_prop_types7.default.oneOfType([import_prop_types7.default.oneOf(["auto"]), import_prop_types7.default.func]),
    tickLabelPlacement: import_prop_types7.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types7.default.object,
    tickMaxStep: import_prop_types7.default.number,
    tickMinStep: import_prop_types7.default.number,
    tickNumber: import_prop_types7.default.number,
    tickPlacement: import_prop_types7.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types7.default.number,
    valueFormatter: import_prop_types7.default.func,
    width: import_prop_types7.default.number
  })]).isRequired),
  /**
   * The configuration of the z-axes.
   */
  zAxis: import_prop_types7.default.arrayOf(import_prop_types7.default.shape({
    colorMap: import_prop_types7.default.oneOfType([import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      type: import_prop_types7.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types7.default.string,
      values: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number, import_prop_types7.default.string]).isRequired)
    }), import_prop_types7.default.shape({
      color: import_prop_types7.default.oneOfType([import_prop_types7.default.arrayOf(import_prop_types7.default.string.isRequired), import_prop_types7.default.func]).isRequired,
      max: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      min: import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]),
      type: import_prop_types7.default.oneOf(["continuous"]).isRequired
    }), import_prop_types7.default.shape({
      colors: import_prop_types7.default.arrayOf(import_prop_types7.default.string).isRequired,
      thresholds: import_prop_types7.default.arrayOf(import_prop_types7.default.oneOfType([import_prop_types7.default.instanceOf(Date), import_prop_types7.default.number]).isRequired).isRequired,
      type: import_prop_types7.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types7.default.array,
    dataKey: import_prop_types7.default.string,
    id: import_prop_types7.default.string,
    max: import_prop_types7.default.number,
    min: import_prop_types7.default.number
  }))
} : void 0;

// node_modules/@mui/x-charts/esm/SparkLineChart/SparkLineChart.js
init_extends();
var React12 = __toESM(require_react(), 1);
var import_prop_types8 = __toESM(require_prop_types(), 1);
var import_jsx_runtime9 = __toESM(require_jsx_runtime(), 1);
var _excluded4 = ["xAxis", "yAxis", "width", "height", "margin", "color", "baseline", "sx", "showTooltip", "showHighlight", "axisHighlight", "children", "slots", "slotProps", "data", "plotType", "valueFormatter", "area", "curve", "className", "disableClipping", "clipAreaOffset", "onHighlightChange", "onHighlightedAxisChange", "highlightedAxis", "highlightedItem"];
var SPARK_LINE_DEFAULT_MARGIN = 5;
var SparkLineChart = React12.forwardRef(function SparkLineChart2(props, ref) {
  const {
    xAxis: xAxisProps,
    yAxis: yAxisProps,
    width,
    height,
    margin = SPARK_LINE_DEFAULT_MARGIN,
    color,
    baseline,
    sx,
    showTooltip,
    showHighlight,
    axisHighlight: inAxisHighlight,
    children,
    slots,
    slotProps,
    data,
    plotType = "line",
    valueFormatter = (value) => value === null ? "" : value.toString(),
    area,
    curve = "linear",
    className,
    disableClipping,
    clipAreaOffset,
    onHighlightChange,
    onHighlightedAxisChange,
    highlightedAxis,
    highlightedItem
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded4);
  const id = useId();
  const clipPathId = `${id}-clip-path`;
  const clipPathOffset = React12.useMemo(() => ({
    top: clipAreaOffset?.top ?? 1,
    right: clipAreaOffset?.right ?? 1,
    bottom: clipAreaOffset?.bottom ?? 1,
    left: clipAreaOffset?.left ?? 1
  }), [clipAreaOffset?.bottom, clipAreaOffset?.left, clipAreaOffset?.right, clipAreaOffset?.top]);
  const defaultXHighlight = React12.useMemo(() => showHighlight && plotType === "bar" ? {
    x: "band"
  } : {
    x: "none"
  }, [plotType, showHighlight]);
  const axisHighlight = React12.useMemo(() => _extends({}, defaultXHighlight, inAxisHighlight), [defaultXHighlight, inAxisHighlight]);
  const Tooltip = props.slots?.tooltip ?? ChartsTooltip;
  const colors = React12.useMemo(() => {
    if (color == null) {
      return void 0;
    }
    return typeof color === "function" ? (mode) => [color(mode)] : [color];
  }, [color]);
  const series = React12.useMemo(() => [_extends({
    type: plotType,
    data,
    valueFormatter
  }, plotType === "bar" ? {} : {
    area,
    curve,
    baseline,
    disableHighlight: !showHighlight
  })], [area, baseline, curve, data, plotType, showHighlight, valueFormatter]);
  const xAxis = React12.useMemo(() => [_extends({
    id: DEFAULT_X_AXIS_KEY,
    scaleType: plotType === "bar" ? "band" : "point",
    hideTooltip: xAxisProps === void 0
  }, xAxisProps, {
    data: xAxisProps?.data ?? Array.from({
      length: data.length
    }, (_, index) => index),
    position: "none"
  })], [data.length, plotType, xAxisProps]);
  const yAxis = React12.useMemo(() => [_extends({
    id: DEFAULT_Y_AXIS_KEY
  }, yAxisProps, {
    position: "none"
  })], [yAxisProps]);
  return (0, import_jsx_runtime9.jsxs)(ChartDataProvider, {
    series,
    width,
    height,
    margin,
    xAxis,
    yAxis,
    colors,
    disableAxisListener: onHighlightedAxisChange === void 0 && (!showTooltip || slotProps?.tooltip?.trigger !== "axis") && axisHighlight?.x === "none" && axisHighlight?.y === "none",
    onHighlightChange,
    onHighlightedAxisChange,
    highlightedAxis,
    highlightedItem,
    children: [(0, import_jsx_runtime9.jsxs)(ChartsSurface, _extends({
      className,
      ref,
      sx
    }, other, {
      children: [(0, import_jsx_runtime9.jsxs)("g", {
        clipPath: `url(#${clipPathId})`,
        children: [plotType === "bar" && (0, import_jsx_runtime9.jsx)(BarPlot, {
          skipAnimation: true,
          slots,
          slotProps
        }), plotType === "line" && (0, import_jsx_runtime9.jsxs)(React12.Fragment, {
          children: [(0, import_jsx_runtime9.jsx)(AreaPlot, {
            skipAnimation: true,
            slots,
            slotProps
          }), (0, import_jsx_runtime9.jsx)(LinePlot, {
            skipAnimation: true,
            slots,
            slotProps
          })]
        })]
      }), plotType === "line" && (0, import_jsx_runtime9.jsxs)(React12.Fragment, {
        children: [(0, import_jsx_runtime9.jsx)(LineHighlightPlot, {
          slots,
          slotProps
        }), (0, import_jsx_runtime9.jsx)(FocusedMark, {})]
      }), disableClipping ? null : (0, import_jsx_runtime9.jsx)(ChartsClipPath, {
        id: clipPathId,
        offset: clipPathOffset
      }), (0, import_jsx_runtime9.jsx)(ChartsAxisHighlight, _extends({}, axisHighlight)), children]
    })), showTooltip && (0, import_jsx_runtime9.jsx)(Tooltip, _extends({}, props.slotProps?.tooltip))]
  });
});
if (true) SparkLineChart.displayName = "SparkLineChart";
true ? SparkLineChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types8.default.shape({
    current: import_prop_types8.default.object
  }),
  /**
   * Set to `true` to fill spark line area.
   * Has no effect if plotType='bar'.
   * @default false
   */
  area: import_prop_types8.default.bool,
  axisHighlight: import_prop_types8.default.shape({
    x: import_prop_types8.default.oneOf(["band", "line", "none"]),
    y: import_prop_types8.default.oneOf(["band", "line", "none"])
  }),
  /**
   * The value of the line at the base of the series area.
   *
   * - `'min'` the area will fill the space **under** the line.
   * - `'max'` the area will fill the space **above** the line.
   * - `number` the area will fill the space between this value and the line
   *
   * @default 0
   */
  baseline: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["max", "min"]), import_prop_types8.default.number]),
  /**
   * Configuration for the brush interaction.
   */
  brushConfig: import_prop_types8.default.shape({
    enabled: import_prop_types8.default.bool,
    preventHighlight: import_prop_types8.default.bool,
    preventTooltip: import_prop_types8.default.bool
  }),
  children: import_prop_types8.default.node,
  className: import_prop_types8.default.string,
  /**
   * The clipped area offset in pixels.
   *
   * This prevents partial clipping of lines when they are drawn on the edge of the drawing area.
   *
   * @default { top: 1, right: 1, bottom: 1, left: 1 }
   */
  clipAreaOffset: import_prop_types8.default.shape({
    bottom: import_prop_types8.default.number,
    left: import_prop_types8.default.number,
    right: import_prop_types8.default.number,
    top: import_prop_types8.default.number
  }),
  /**
   * Color used to colorize the sparkline.
   * @default rainbowSurgePalette[0]
   */
  color: import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.string]),
  /**
   * @default 'linear'
   */
  curve: import_prop_types8.default.oneOf(["bumpX", "bumpY", "catmullRom", "linear", "monotoneX", "monotoneY", "natural", "step", "stepAfter", "stepBefore"]),
  /**
   * Data to plot.
   */
  data: import_prop_types8.default.arrayOf(import_prop_types8.default.number).isRequired,
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types8.default.arrayOf(import_prop_types8.default.object),
  desc: import_prop_types8.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types8.default.bool,
  /**
   * When `true`, the chart's drawing area will not be clipped and elements within can visually overflow the chart.
   *
   * @default false
   */
  disableClipping: import_prop_types8.default.bool,
  /**
   * If true, the voronoi interaction are ignored.
   */
  disableVoronoi: import_prop_types8.default.bool,
  enableKeyboardNavigation: import_prop_types8.default.bool,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types8.default.number,
  /**
   * The controlled axis highlight.
   * Identified by the axis id, and data index.
   */
  highlightedAxis: import_prop_types8.default.arrayOf(import_prop_types8.default.shape({
    axisId: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]).isRequired,
    dataIndex: import_prop_types8.default.number.isRequired
  })),
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types8.default.shape({
    dataIndex: import_prop_types8.default.number,
    seriesId: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types8.default.string,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types8.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   * @default 5
   */
  margin: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.shape({
    bottom: import_prop_types8.default.number,
    left: import_prop_types8.default.number,
    right: import_prop_types8.default.number,
    top: import_prop_types8.default.number
  })]),
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | ChartsAxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types8.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types8.default.func,
  /**
   * The function called when the pointer position corresponds to a new axis data item.
   * This update can either be caused by a pointer movement, or an axis update.
   * In case of multiple axes, the function is called if at least one axis is updated.
   * The argument contains the identifier for all axes with a `data` property.
   * @param {AxisItemIdentifier[]} axisItems The array of axes item identifiers.
   */
  onHighlightedAxisChange: import_prop_types8.default.func,
  /**
   * Callback fired when clicking close to an item.
   * This is only available for scatter plot for now.
   * @param {MouseEvent} event Mouse event caught at the svg level
   * @param {ScatterItemIdentifier} scatterItemIdentifier Identify which item got clicked
   */
  onItemClick: import_prop_types8.default.func,
  /**
   * Type of plot used.
   * @default 'line'
   */
  plotType: import_prop_types8.default.oneOf(["bar", "line"]),
  /**
   * Set to `true` to highlight the value.
   * With line, it shows a point.
   * With bar, it shows a highlight band.
   * @default false
   */
  showHighlight: import_prop_types8.default.bool,
  /**
   * Set to `true` to enable the tooltip in the sparkline.
   * @default false
   */
  showTooltip: import_prop_types8.default.bool,
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types8.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types8.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types8.default.object,
  sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
  theme: import_prop_types8.default.oneOf(["dark", "light"]),
  title: import_prop_types8.default.string,
  /**
   * Formatter used by the tooltip.
   * @param {number} value The value to format.
   * @returns {string} the formatted value.
   * @default (value: number | null) => (value === null ? '' : value.toString())
   */
  valueFormatter: import_prop_types8.default.func,
  /**
   * Defines the maximum distance between a scatter point and the pointer that triggers the interaction.
   * If set to `'item'`, the radius is the `markerSize`.
   * If `undefined`, the radius is assumed to be infinite.
   */
  voronoiMaxRadius: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["item"]), import_prop_types8.default.number]),
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types8.default.number,
  /**
   * The xAxis configuration.
   * Notice it is a single [[AxisConfig]] object, not an array of configuration.
   */
  xAxis: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["x"]),
    barGapRatio: import_prop_types8.default.number,
    categoryGapRatio: import_prop_types8.default.number,
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      type: import_prop_types8.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types8.default.string,
      values: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number, import_prop_types8.default.string]).isRequired)
    }), import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    groups: import_prop_types8.default.arrayOf(import_prop_types8.default.shape({
      getValue: import_prop_types8.default.func.isRequired,
      tickLabelStyle: import_prop_types8.default.object,
      tickSize: import_prop_types8.default.number
    })),
    height: import_prop_types8.default.number,
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["band"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelMinGap: import_prop_types8.default.number,
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["x"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      type: import_prop_types8.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types8.default.string,
      values: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number, import_prop_types8.default.string]).isRequired)
    }), import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    groups: import_prop_types8.default.arrayOf(import_prop_types8.default.shape({
      getValue: import_prop_types8.default.func.isRequired,
      tickLabelStyle: import_prop_types8.default.object,
      tickSize: import_prop_types8.default.number
    })),
    height: import_prop_types8.default.number,
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["point"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelMinGap: import_prop_types8.default.number,
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["x"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    height: import_prop_types8.default.number,
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    max: import_prop_types8.default.number,
    min: import_prop_types8.default.number,
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["log"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelMinGap: import_prop_types8.default.number,
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["x"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    constant: import_prop_types8.default.number,
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    height: import_prop_types8.default.number,
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    max: import_prop_types8.default.number,
    min: import_prop_types8.default.number,
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["symlog"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelMinGap: import_prop_types8.default.number,
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["x"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    height: import_prop_types8.default.number,
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    max: import_prop_types8.default.number,
    min: import_prop_types8.default.number,
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["pow"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelMinGap: import_prop_types8.default.number,
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["x"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    height: import_prop_types8.default.number,
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    max: import_prop_types8.default.number,
    min: import_prop_types8.default.number,
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["sqrt"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelMinGap: import_prop_types8.default.number,
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["x"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    height: import_prop_types8.default.number,
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    max: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.shape({
      valueOf: import_prop_types8.default.func.isRequired
    })]),
    min: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.shape({
      valueOf: import_prop_types8.default.func.isRequired
    })]),
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["time"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelMinGap: import_prop_types8.default.number,
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["x"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    height: import_prop_types8.default.number,
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    max: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.shape({
      valueOf: import_prop_types8.default.func.isRequired
    })]),
    min: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.shape({
      valueOf: import_prop_types8.default.func.isRequired
    })]),
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["utc"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelMinGap: import_prop_types8.default.number,
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["x"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    height: import_prop_types8.default.number,
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    max: import_prop_types8.default.number,
    min: import_prop_types8.default.number,
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["linear"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelMinGap: import_prop_types8.default.number,
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func
  })]),
  /**
   * The yAxis configuration.
   * Notice it is a single [[AxisConfig]] object, not an array of configuration.
   */
  yAxis: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["y"]),
    barGapRatio: import_prop_types8.default.number,
    categoryGapRatio: import_prop_types8.default.number,
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      type: import_prop_types8.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types8.default.string,
      values: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number, import_prop_types8.default.string]).isRequired)
    }), import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    groups: import_prop_types8.default.arrayOf(import_prop_types8.default.shape({
      getValue: import_prop_types8.default.func.isRequired,
      tickLabelStyle: import_prop_types8.default.object,
      tickSize: import_prop_types8.default.number
    })),
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["band"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func,
    width: import_prop_types8.default.number
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["y"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      type: import_prop_types8.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types8.default.string,
      values: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number, import_prop_types8.default.string]).isRequired)
    }), import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    groups: import_prop_types8.default.arrayOf(import_prop_types8.default.shape({
      getValue: import_prop_types8.default.func.isRequired,
      tickLabelStyle: import_prop_types8.default.object,
      tickSize: import_prop_types8.default.number
    })),
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["point"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func,
    width: import_prop_types8.default.number
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["y"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    max: import_prop_types8.default.number,
    min: import_prop_types8.default.number,
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["log"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func,
    width: import_prop_types8.default.number
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["y"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    constant: import_prop_types8.default.number,
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    max: import_prop_types8.default.number,
    min: import_prop_types8.default.number,
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["symlog"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func,
    width: import_prop_types8.default.number
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["y"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    max: import_prop_types8.default.number,
    min: import_prop_types8.default.number,
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["pow"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func,
    width: import_prop_types8.default.number
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["y"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    max: import_prop_types8.default.number,
    min: import_prop_types8.default.number,
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["sqrt"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func,
    width: import_prop_types8.default.number
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["y"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    max: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.shape({
      valueOf: import_prop_types8.default.func.isRequired
    })]),
    min: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.shape({
      valueOf: import_prop_types8.default.func.isRequired
    })]),
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["time"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func,
    width: import_prop_types8.default.number
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["y"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    max: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.shape({
      valueOf: import_prop_types8.default.func.isRequired
    })]),
    min: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.shape({
      valueOf: import_prop_types8.default.func.isRequired
    })]),
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["utc"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func,
    width: import_prop_types8.default.number
  }), import_prop_types8.default.shape({
    axis: import_prop_types8.default.oneOf(["y"]),
    classes: import_prop_types8.default.object,
    colorMap: import_prop_types8.default.oneOfType([import_prop_types8.default.shape({
      color: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.string.isRequired), import_prop_types8.default.func]).isRequired,
      max: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      min: import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]),
      type: import_prop_types8.default.oneOf(["continuous"]).isRequired
    }), import_prop_types8.default.shape({
      colors: import_prop_types8.default.arrayOf(import_prop_types8.default.string).isRequired,
      thresholds: import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.instanceOf(Date), import_prop_types8.default.number]).isRequired).isRequired,
      type: import_prop_types8.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types8.default.array,
    dataKey: import_prop_types8.default.string,
    disableLine: import_prop_types8.default.bool,
    disableTicks: import_prop_types8.default.bool,
    domainLimit: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["nice", "strict"]), import_prop_types8.default.func]),
    hideTooltip: import_prop_types8.default.bool,
    id: import_prop_types8.default.oneOfType([import_prop_types8.default.number, import_prop_types8.default.string]),
    ignoreTooltip: import_prop_types8.default.bool,
    label: import_prop_types8.default.string,
    labelStyle: import_prop_types8.default.object,
    max: import_prop_types8.default.number,
    min: import_prop_types8.default.number,
    offset: import_prop_types8.default.number,
    position: import_prop_types8.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types8.default.bool,
    scaleType: import_prop_types8.default.oneOf(["linear"]),
    slotProps: import_prop_types8.default.object,
    slots: import_prop_types8.default.object,
    sx: import_prop_types8.default.oneOfType([import_prop_types8.default.arrayOf(import_prop_types8.default.oneOfType([import_prop_types8.default.func, import_prop_types8.default.object, import_prop_types8.default.bool])), import_prop_types8.default.func, import_prop_types8.default.object]),
    tickInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.array, import_prop_types8.default.func]),
    tickLabelInterval: import_prop_types8.default.oneOfType([import_prop_types8.default.oneOf(["auto"]), import_prop_types8.default.func]),
    tickLabelPlacement: import_prop_types8.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types8.default.object,
    tickMaxStep: import_prop_types8.default.number,
    tickMinStep: import_prop_types8.default.number,
    tickNumber: import_prop_types8.default.number,
    tickPlacement: import_prop_types8.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types8.default.number,
    valueFormatter: import_prop_types8.default.func,
    width: import_prop_types8.default.number
  })])
} : void 0;

// node_modules/@mui/x-charts/esm/Gauge/Gauge.js
init_extends();
var React18 = __toESM(require_react(), 1);
var import_prop_types12 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/Gauge/GaugeContainer.js
init_extends();
var React14 = __toESM(require_react(), 1);
var import_prop_types9 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/Gauge/GaugeProvider.js
var React13 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/Gauge/utils.js
function getPoint(angle) {
  const radAngle = deg2rad(angle);
  return [Math.sin(radAngle), -Math.cos(radAngle)];
}
function getArcRatios(startAngle, endAngle) {
  const points = [[0, 0], getPoint(startAngle), getPoint(endAngle)];
  const minAngle = Math.min(startAngle, endAngle);
  const maxAngle = Math.max(startAngle, endAngle);
  const initialAngle = Math.floor(minAngle / 90) * 90;
  for (let step = 1; step <= 4; step += 1) {
    const cardinalAngle = initialAngle + step * 90;
    if (cardinalAngle < maxAngle) {
      points.push(getPoint(cardinalAngle));
    }
  }
  const minX = Math.min(...points.map(([x]) => x));
  const maxX = Math.max(...points.map(([x]) => x));
  const minY = Math.min(...points.map(([, y]) => y));
  const maxY = Math.max(...points.map(([, y]) => y));
  return {
    cx: -minX / (maxX - minX),
    cy: -minY / (maxY - minY),
    minX,
    maxX,
    minY,
    maxY
  };
}
function getAvailableRadius(cx, cy, width, height, {
  minX,
  maxX,
  minY,
  maxY
}) {
  return Math.min(...[{
    ratio: Math.abs(minX),
    space: cx
  }, {
    ratio: Math.abs(maxX),
    space: width - cx
  }, {
    ratio: Math.abs(minY),
    space: cy
  }, {
    ratio: Math.abs(maxY),
    space: height - cy
  }].map(({
    ratio,
    space
  }) => {
    if (ratio < 1e-5) {
      return Infinity;
    }
    return space / ratio;
  }));
}

// node_modules/@mui/x-charts/esm/Gauge/GaugeProvider.js
var import_jsx_runtime10 = __toESM(require_jsx_runtime(), 1);
var GaugeContext = React13.createContext({
  value: null,
  valueMin: 0,
  valueMax: 0,
  startAngle: 0,
  endAngle: 0,
  innerRadius: 0,
  outerRadius: 0,
  cornerRadius: 0,
  cx: 0,
  cy: 0,
  maxRadius: 0,
  valueAngle: null
});
if (true) GaugeContext.displayName = "GaugeContext";
function GaugeProvider(props) {
  const {
    value = null,
    valueMin = 0,
    valueMax = 100,
    startAngle = 0,
    endAngle = 360,
    outerRadius: outerRadiusParam,
    innerRadius: innerRadiusParam,
    cornerRadius: cornerRadiusParam,
    cx: cxParam,
    cy: cyParam,
    children
  } = props;
  const {
    left,
    top,
    width,
    height
  } = useDrawingArea();
  const ratios = getArcRatios(startAngle, endAngle);
  const innerCx = cxParam ? getPercentageValue(cxParam, width) : ratios.cx * width;
  const innerCy = cyParam ? getPercentageValue(cyParam, height) : ratios.cy * height;
  let cx = left + innerCx;
  let cy = top + innerCy;
  const maxRadius = getAvailableRadius(innerCx, innerCy, width, height, ratios);
  if (cxParam === void 0) {
    const usedWidth = maxRadius * (ratios.maxX - ratios.minX);
    cx = left + (width - usedWidth) / 2 + ratios.cx * usedWidth;
  }
  if (cyParam === void 0) {
    const usedHeight = maxRadius * (ratios.maxY - ratios.minY);
    cy = top + (height - usedHeight) / 2 + ratios.cy * usedHeight;
  }
  const outerRadius = getPercentageValue(outerRadiusParam ?? maxRadius, maxRadius);
  const innerRadius = getPercentageValue(innerRadiusParam ?? "80%", maxRadius);
  const cornerRadius = getPercentageValue(cornerRadiusParam ?? 0, outerRadius - innerRadius);
  const contextValue = React13.useMemo(() => {
    const startAngleRad = deg2rad(startAngle);
    const endAngleRad = deg2rad(endAngle);
    return {
      value,
      valueMin,
      valueMax,
      startAngle: startAngleRad,
      endAngle: endAngleRad,
      outerRadius,
      innerRadius,
      cornerRadius,
      cx,
      cy,
      maxRadius,
      valueAngle: value === null ? null : startAngleRad + (endAngleRad - startAngleRad) * (value - valueMin) / (valueMax - valueMin)
    };
  }, [value, valueMin, valueMax, startAngle, endAngle, outerRadius, innerRadius, cornerRadius, cx, cy, maxRadius]);
  return (0, import_jsx_runtime10.jsx)(GaugeContext.Provider, {
    value: contextValue,
    children
  });
}
function useGaugeState() {
  return React13.useContext(GaugeContext);
}

// node_modules/@mui/x-charts/esm/Gauge/GaugeContainer.js
var import_jsx_runtime11 = __toESM(require_jsx_runtime(), 1);
var _excluded5 = ["width", "height", "margin", "title", "desc", "value", "valueMin", "valueMax", "startAngle", "endAngle", "outerRadius", "innerRadius", "cornerRadius", "cx", "cy", "children"];
var GStyled = styled_default("g")(({
  theme
}) => ({
  "& text": {
    fill: (theme.vars || theme).palette.text.primary
  }
}));
var GaugeContainer = React14.forwardRef(function GaugeContainer2(props, ref) {
  const {
    width: inWidth,
    height: inHeight,
    margin,
    title,
    desc,
    value,
    valueMin = 0,
    valueMax = 100,
    startAngle,
    endAngle,
    outerRadius,
    innerRadius,
    cornerRadius,
    cx,
    cy,
    children
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded5);
  return (0, import_jsx_runtime11.jsx)(ChartProvider, {
    pluginParams: {
      width: inWidth,
      height: inHeight,
      margin: defaultizeMargin(margin, {
        left: 10,
        right: 10,
        top: 10,
        bottom: 10
      })
    },
    plugins: [],
    children: (0, import_jsx_runtime11.jsx)(GaugeProvider, {
      value,
      valueMin,
      valueMax,
      startAngle,
      endAngle,
      outerRadius,
      innerRadius,
      cornerRadius,
      cx,
      cy,
      children: (0, import_jsx_runtime11.jsx)(ChartsSurface, _extends({
        title,
        desc,
        role: "meter",
        "aria-valuenow": value === null ? void 0 : value,
        "aria-valuemin": valueMin,
        "aria-valuemax": valueMax
      }, other, {
        ref,
        children: (0, import_jsx_runtime11.jsx)(GStyled, {
          "aria-hidden": "true",
          children
        })
      }))
    })
  });
});
if (true) GaugeContainer.displayName = "GaugeContainer";
true ? GaugeContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types9.default.node,
  className: import_prop_types9.default.string,
  /**
   * The radius applied to arc corners (similar to border radius).
   * Set it to '50%' to get rounded arc.
   * @default 0
   */
  cornerRadius: import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.string]),
  /**
   * The x coordinate of the arc center.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the width the drawing area.
   */
  cx: import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.string]),
  /**
   * The y coordinate of the arc center.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the height the drawing area.
   */
  cy: import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.string]),
  desc: import_prop_types9.default.string,
  /**
   * The end angle (deg).
   * @default 360
   */
  endAngle: import_prop_types9.default.number,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types9.default.number,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types9.default.string,
  /**
   * The radius between circle center and the beginning of the arc.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the maximal radius that fit into the drawing area.
   * @default '80%'
   */
  innerRadius: import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.string]),
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.shape({
    bottom: import_prop_types9.default.number,
    left: import_prop_types9.default.number,
    right: import_prop_types9.default.number,
    top: import_prop_types9.default.number
  })]),
  /**
   * The radius between circle center and the end of the arc.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the maximal radius that fit into the drawing area.
   * @default '100%'
   */
  outerRadius: import_prop_types9.default.oneOfType([import_prop_types9.default.number, import_prop_types9.default.string]),
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types9.default.bool,
  /**
   * The start angle (deg).
   * @default 0
   */
  startAngle: import_prop_types9.default.number,
  sx: import_prop_types9.default.oneOfType([import_prop_types9.default.arrayOf(import_prop_types9.default.oneOfType([import_prop_types9.default.func, import_prop_types9.default.object, import_prop_types9.default.bool])), import_prop_types9.default.func, import_prop_types9.default.object]),
  title: import_prop_types9.default.string,
  /**
   * The value of the gauge.
   * Set to `null` to not display a value.
   */
  value: import_prop_types9.default.number,
  /**
   * The maximal value of the gauge.
   * @default 100
   */
  valueMax: import_prop_types9.default.number,
  /**
   * The minimal value of the gauge.
   * @default 0
   */
  valueMin: import_prop_types9.default.number,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types9.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/Gauge/GaugeValueArc.js
init_extends();
var React15 = __toESM(require_react(), 1);
var import_prop_types10 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/hooks/animation/useAnimateGaugeValueArc.js
function gaugeValueArcPropsInterpolator(from, to) {
  const interpolateStartAngle = number_default(from.startAngle, to.startAngle);
  const interpolateEndAngle = number_default(from.endAngle, to.endAngle);
  const interpolateInnerRadius = number_default(from.innerRadius, to.innerRadius);
  const interpolateOuterRadius = number_default(from.outerRadius, to.outerRadius);
  const interpolateCornerRadius = number_default(from.cornerRadius, to.cornerRadius);
  return (t) => {
    return {
      startAngle: interpolateStartAngle(t),
      endAngle: interpolateEndAngle(t),
      innerRadius: interpolateInnerRadius(t),
      outerRadius: interpolateOuterRadius(t),
      cornerRadius: interpolateCornerRadius(t)
    };
  };
}
function useAnimateGaugeValueArc(props) {
  return useAnimate({
    startAngle: props.startAngle,
    endAngle: props.endAngle,
    innerRadius: props.innerRadius,
    outerRadius: props.outerRadius,
    cornerRadius: props.cornerRadius
  }, {
    createInterpolator: gaugeValueArcPropsInterpolator,
    transformProps: (p) => ({
      d: arc_default().cornerRadius(p.cornerRadius)({
        innerRadius: p.innerRadius,
        outerRadius: p.outerRadius,
        startAngle: p.startAngle,
        endAngle: p.endAngle
      })
    }),
    applyProps(element, p) {
      element.setAttribute("d", p.d);
    },
    initialProps: {
      startAngle: props.startAngle,
      endAngle: props.startAngle,
      innerRadius: props.innerRadius,
      outerRadius: props.outerRadius,
      cornerRadius: props.cornerRadius
    },
    skip: props.skipAnimation,
    ref: props.ref
  });
}

// node_modules/@mui/x-charts/esm/Gauge/gaugeClasses.js
function getGaugeUtilityClass(slot) {
  return generateUtilityClass("MuiGauge", slot);
}
var gaugeClasses = generateUtilityClasses("MuiGauge", ["root", "valueArc", "referenceArc", "valueText"]);

// node_modules/@mui/x-charts/esm/Gauge/GaugeValueArc.js
var import_jsx_runtime12 = __toESM(require_jsx_runtime(), 1);
var _excluded6 = ["className"];
var _excluded22 = ["cx", "cy", "startAngle", "endAngle", "cornerRadius", "innerRadius", "outerRadius", "skipAnimation"];
var StyledPath = styled_default("path", {
  name: "MuiGauge",
  slot: "ValueArc"
})(({
  theme
}) => ({
  fill: (theme.vars || theme).palette.primary.main
}));
function GaugeValueArc(_ref) {
  let {
    className
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded6);
  const {
    value,
    valueMin,
    valueMax,
    startAngle,
    endAngle,
    outerRadius,
    innerRadius,
    cornerRadius,
    cx,
    cy
  } = useGaugeState();
  if (value === null) {
    return null;
  }
  const valueAngle = startAngle + (value - valueMin) / (valueMax - valueMin) * (endAngle - startAngle);
  return (0, import_jsx_runtime12.jsx)(AnimatedGaugeValueArc, _extends({}, other, {
    className: clsx_default(gaugeClasses.valueArc, className),
    cx,
    cy,
    startAngle,
    endAngle: valueAngle,
    cornerRadius,
    innerRadius,
    outerRadius
  }));
}
true ? GaugeValueArc.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  skipAnimation: import_prop_types10.default.bool
} : void 0;
function AnimatedGaugeValueArc(_ref2) {
  let {
    cx,
    cy,
    startAngle,
    endAngle,
    cornerRadius,
    innerRadius,
    outerRadius,
    skipAnimation: inSkipAnimation
  } = _ref2, other = _objectWithoutPropertiesLoose(_ref2, _excluded22);
  const skipAnimation = useSkipAnimation(inSkipAnimation);
  const animatedProps = useAnimateGaugeValueArc({
    startAngle,
    endAngle,
    cornerRadius,
    innerRadius,
    outerRadius,
    skipAnimation
  });
  return (0, import_jsx_runtime12.jsx)(StyledPath, _extends({}, animatedProps, {
    transform: `translate(${cx}, ${cy})`
  }, other));
}
true ? AnimatedGaugeValueArc.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  cornerRadius: import_prop_types10.default.number.isRequired,
  cx: import_prop_types10.default.number.isRequired,
  cy: import_prop_types10.default.number.isRequired,
  endAngle: import_prop_types10.default.number.isRequired,
  innerRadius: import_prop_types10.default.number.isRequired,
  outerRadius: import_prop_types10.default.number.isRequired,
  skipAnimation: import_prop_types10.default.bool,
  startAngle: import_prop_types10.default.number.isRequired
} : void 0;

// node_modules/@mui/x-charts/esm/Gauge/GaugeReferenceArc.js
init_extends();
var React16 = __toESM(require_react(), 1);
var import_jsx_runtime13 = __toESM(require_jsx_runtime(), 1);
var _excluded7 = ["className"];
var StyledPath2 = styled_default("path", {
  name: "MuiGauge",
  slot: "ReferenceArc"
})(({
  theme
}) => ({
  fill: (theme.vars || theme).palette.divider
}));
function GaugeReferenceArc(_ref) {
  let {
    className
  } = _ref, other = _objectWithoutPropertiesLoose(_ref, _excluded7);
  const {
    startAngle,
    endAngle,
    outerRadius,
    innerRadius,
    cornerRadius,
    cx,
    cy
  } = useGaugeState();
  return (0, import_jsx_runtime13.jsx)(StyledPath2, _extends({
    className: clsx_default(gaugeClasses.referenceArc, className),
    transform: `translate(${cx}, ${cy})`,
    d: arc_default().cornerRadius(cornerRadius)({
      startAngle,
      endAngle,
      innerRadius,
      outerRadius
    })
  }, other));
}

// node_modules/@mui/x-charts/esm/Gauge/GaugeValueText.js
init_extends();
var React17 = __toESM(require_react(), 1);
var import_prop_types11 = __toESM(require_prop_types(), 1);
var import_jsx_runtime14 = __toESM(require_jsx_runtime(), 1);
var _excluded8 = ["text", "className"];
function defaultFormatter({
  value
}) {
  return value === null ? null : value.toLocaleString();
}
function GaugeValueText(props) {
  const {
    text = defaultFormatter,
    className
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded8);
  const {
    value,
    valueMin,
    valueMax,
    cx,
    cy
  } = useGaugeState();
  const formattedText = typeof text === "function" ? text({
    value,
    valueMin,
    valueMax
  }) : text;
  if (formattedText === null) {
    return null;
  }
  return (0, import_jsx_runtime14.jsx)("g", {
    className: clsx_default(gaugeClasses.valueText, className),
    children: (0, import_jsx_runtime14.jsx)(ChartsText, _extends({
      x: cx,
      y: cy,
      text: formattedText,
      style: {
        textAnchor: "middle",
        dominantBaseline: "central"
      }
    }, other))
  });
}
true ? GaugeValueText.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Height of a text line (in `em`).
   */
  lineHeight: import_prop_types11.default.number,
  /**
   * If `true`, the line width is computed.
   * @default false
   */
  needsComputation: import_prop_types11.default.bool,
  ownerState: import_prop_types11.default.any,
  /**
   * Style applied to text elements.
   */
  style: import_prop_types11.default.object,
  text: import_prop_types11.default.oneOfType([import_prop_types11.default.func, import_prop_types11.default.string])
} : void 0;

// node_modules/@mui/x-charts/esm/Gauge/Gauge.js
var import_jsx_runtime15 = __toESM(require_jsx_runtime(), 1);
var _excluded9 = ["text", "children", "classes", "className", "skipAnimation"];
var useUtilityClasses3 = (props) => {
  const {
    classes
  } = props;
  const slots = {
    root: ["root"]
  };
  return composeClasses(slots, getGaugeUtilityClass, classes);
};
var Gauge = React18.forwardRef(function Gauge2(props, ref) {
  const {
    text,
    children,
    className,
    skipAnimation
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded9);
  const classes = useUtilityClasses3(props);
  return (0, import_jsx_runtime15.jsxs)(GaugeContainer, _extends({}, other, {
    className: clsx_default(classes.root, className),
    ref,
    children: [(0, import_jsx_runtime15.jsx)(GaugeReferenceArc, {}), (0, import_jsx_runtime15.jsx)(GaugeValueArc, {
      skipAnimation
    }), (0, import_jsx_runtime15.jsx)(GaugeValueText, {
      text
    }), children]
  }));
});
if (true) Gauge.displayName = "Gauge";
true ? Gauge.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  children: import_prop_types12.default.node,
  classes: import_prop_types12.default.object,
  className: import_prop_types12.default.string,
  /**
   * The radius applied to arc corners (similar to border radius).
   * Set it to '50%' to get rounded arc.
   * @default 0
   */
  cornerRadius: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
  /**
   * The x coordinate of the arc center.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the width the drawing area.
   */
  cx: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
  /**
   * The y coordinate of the arc center.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the height the drawing area.
   */
  cy: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
  desc: import_prop_types12.default.string,
  /**
   * The end angle (deg).
   * @default 360
   */
  endAngle: import_prop_types12.default.number,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types12.default.number,
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types12.default.string,
  /**
   * The radius between circle center and the beginning of the arc.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the maximal radius that fit into the drawing area.
   * @default '80%'
   */
  innerRadius: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.shape({
    bottom: import_prop_types12.default.number,
    left: import_prop_types12.default.number,
    right: import_prop_types12.default.number,
    top: import_prop_types12.default.number
  })]),
  /**
   * The radius between circle center and the end of the arc.
   * Can be a number (in px) or a string with a percentage such as '50%'.
   * The '100%' is the maximal radius that fit into the drawing area.
   * @default '100%'
   */
  outerRadius: import_prop_types12.default.oneOfType([import_prop_types12.default.number, import_prop_types12.default.string]),
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types12.default.bool,
  /**
   * The start angle (deg).
   * @default 0
   */
  startAngle: import_prop_types12.default.number,
  sx: import_prop_types12.default.oneOfType([import_prop_types12.default.arrayOf(import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.object, import_prop_types12.default.bool])), import_prop_types12.default.func, import_prop_types12.default.object]),
  text: import_prop_types12.default.oneOfType([import_prop_types12.default.func, import_prop_types12.default.string]),
  title: import_prop_types12.default.string,
  /**
   * The value of the gauge.
   * Set to `null` to not display a value.
   */
  value: import_prop_types12.default.number,
  /**
   * The maximal value of the gauge.
   * @default 100
   */
  valueMax: import_prop_types12.default.number,
  /**
   * The minimal value of the gauge.
   * @default 0
   */
  valueMin: import_prop_types12.default.number,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types12.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarChart.js
init_extends();
var React31 = __toESM(require_react(), 1);
var import_prop_types18 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/useRadarChartProps.js
var _excluded10 = ["apiRef", "series", "radar", "width", "height", "margin", "colors", "sx", "children", "slots", "slotProps", "skipAnimation", "loading", "highlightedItem", "onHighlightChange", "hideLegend", "divisions", "shape", "stripeColor", "highlight", "showToolbar", "onAxisClick", "onAreaClick", "onMarkClick"];
var useRadarChartProps = (props) => {
  const {
    apiRef,
    series,
    radar,
    width,
    height,
    margin,
    colors,
    sx,
    children,
    slots,
    slotProps,
    skipAnimation,
    loading,
    highlightedItem,
    onHighlightChange,
    divisions,
    shape,
    stripeColor,
    highlight = "axis",
    onAxisClick,
    onAreaClick,
    onMarkClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded10);
  const radarDataProviderProps = {
    apiRef,
    series,
    radar,
    highlight,
    width,
    height,
    margin,
    colors,
    highlightedItem,
    onHighlightChange,
    skipAnimation,
    onAxisClick
  };
  const overlayProps = {
    slots,
    slotProps,
    loading
  };
  const legendProps = {
    slots,
    slotProps
  };
  const chartsWrapperProps = {
    sx,
    hideLegend: props.hideLegend ?? false
  };
  const radarGrid = {
    divisions,
    shape,
    stripeColor
  };
  const radarSeriesAreaProps = {
    onItemClick: onAreaClick
  };
  const radarSeriesMarksProps = {
    onItemClick: onMarkClick
  };
  const chartsSurfaceProps = other;
  return {
    highlight,
    chartsWrapperProps,
    chartsSurfaceProps,
    radarDataProviderProps,
    radarGrid,
    radarSeriesAreaProps,
    radarSeriesMarksProps,
    overlayProps,
    legendProps,
    children
  };
};

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/RadarGrid.js
var React23 = __toESM(require_react(), 1);
var import_prop_types13 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/useRadarGridData.js
function useRadarGridData() {
  const {
    instance,
    store
  } = useChartContext();
  const rotationScale = useRotationScale();
  const {
    radiusAxis
  } = useRadiusAxes();
  const {
    cx,
    cy
  } = useSelector(store, selectorChartPolarCenter);
  if (!rotationScale || rotationScale.domain().length === 0) {
    return null;
  }
  const metrics = rotationScale.domain();
  const angles = metrics.map((key) => rotationScale(key));
  return {
    center: {
      x: cx,
      y: cy
    },
    corners: metrics.map((metric, dataIndex) => {
      const radiusScale = radiusAxis[metric].scale;
      const r = radiusScale.range()[1];
      const angle = angles[dataIndex];
      const [x, y] = instance.polar2svg(r, angle);
      return {
        x,
        y
      };
    }),
    radius: radiusAxis[metrics[0]].scale.range()[1]
  };
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/SharpRadarGrid.js
var React19 = __toESM(require_react(), 1);
var import_jsx_runtime16 = __toESM(require_jsx_runtime(), 1);
function SharpRadarGrid(props) {
  const {
    center,
    corners,
    divisions,
    strokeColor,
    classes
  } = props;
  const divisionRatio = Array.from({
    length: divisions
  }, (_, index) => (index + 1) / divisions);
  return (0, import_jsx_runtime16.jsxs)(React19.Fragment, {
    children: [corners.map(({
      x,
      y
    }, i) => (0, import_jsx_runtime16.jsx)("path", {
      d: `M ${center.x} ${center.y} L ${x} ${y}`,
      stroke: strokeColor,
      strokeWidth: 1,
      strokeOpacity: 0.3,
      fill: "none",
      className: classes?.radial
    }, i)), divisionRatio.map((ratio) => (0, import_jsx_runtime16.jsx)("path", {
      d: `M ${corners.map(({
        x,
        y
      }) => `${center.x * (1 - ratio) + ratio * x} ${center.y * (1 - ratio) + ratio * y}`).join(" L ")} Z`,
      stroke: strokeColor,
      strokeWidth: 1,
      strokeOpacity: 0.3,
      fill: "none",
      className: classes?.divider
    }, ratio))]
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/CircularRadarGrid.js
var React20 = __toESM(require_react(), 1);
var import_jsx_runtime17 = __toESM(require_jsx_runtime(), 1);
function CircularRadarGrid(props) {
  const {
    center,
    corners,
    divisions,
    radius,
    strokeColor,
    classes
  } = props;
  const divisionRadius = Array.from({
    length: divisions
  }, (_, index) => radius * (index + 1) / divisions);
  return (0, import_jsx_runtime17.jsxs)(React20.Fragment, {
    children: [corners.map(({
      x,
      y
    }, i) => (0, import_jsx_runtime17.jsx)("path", {
      d: `M ${center.x} ${center.y} L ${x} ${y}`,
      stroke: strokeColor,
      strokeWidth: 1,
      strokeOpacity: 0.3,
      fill: "none",
      className: classes?.radial
    }, i)), divisionRadius.map((r) => (0, import_jsx_runtime17.jsx)("circle", {
      cx: center.x,
      cy: center.y,
      r,
      stroke: strokeColor,
      strokeWidth: 1,
      strokeOpacity: 0.3,
      fill: "none",
      className: classes?.divider
    }, r))]
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/SharpRadarStripes.js
var React21 = __toESM(require_react(), 1);
var import_jsx_runtime18 = __toESM(require_jsx_runtime(), 1);
var getPath = (corners, center, outerRatio, innerRatio) => ["M", [...corners, corners[0]].map(({
  x,
  y
}) => `${center.x * (1 - outerRatio) + outerRatio * x} ${center.y * (1 - outerRatio) + outerRatio * y}`).join(" L "), "L", [...corners, corners[0]].reverse().map(({
  x,
  y
}) => `${center.x * (1 - innerRatio) + innerRatio * x} ${center.y * (1 - innerRatio) + innerRatio * y}`).join(" L "), "Z"].join(" ");
function SharpRadarStripes(props) {
  const {
    center,
    corners,
    divisions,
    stripeColor,
    classes
  } = props;
  const divisionRatio = Array.from({
    length: divisions
  }, (_, index) => (index + 1) / divisions);
  return (0, import_jsx_runtime18.jsx)(React21.Fragment, {
    children: divisionRatio.map((ratio, index) => {
      const smallerRatio = divisionRatio[index - 1] ?? 0;
      return (0, import_jsx_runtime18.jsx)("path", {
        d: getPath(corners, center, ratio, smallerRatio),
        stroke: "none",
        fill: stripeColor?.(index) ?? "none",
        fillOpacity: 0.1,
        className: classes?.stripe
      }, ratio);
    })
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/CircularRadarStripes.js
var React22 = __toESM(require_react(), 1);
var import_jsx_runtime19 = __toESM(require_jsx_runtime(), 1);
var getPath2 = (center, outerRadius, innerRadius) => [`M ${center.x - outerRadius} ${center.y}`, `A ${outerRadius} ${outerRadius} 0 1 0 ${center.x + outerRadius} ${center.y}`, `A ${outerRadius} ${outerRadius} 0 1 0 ${center.x - outerRadius} ${center.y} Z`, `M ${center.x - innerRadius} ${center.y}`, `A ${innerRadius} ${innerRadius} 0 1 0 ${center.x + innerRadius} ${center.y}`, `A ${innerRadius} ${innerRadius} 0 1 0 ${center.x - innerRadius} ${center.y} Z`].join("");
function CircularRadarStripes(props) {
  const {
    center,
    divisions,
    radius,
    stripeColor,
    classes
  } = props;
  const divisionRadius = Array.from({
    length: divisions
  }, (_, index) => radius * (index + 1) / divisions);
  return (0, import_jsx_runtime19.jsx)(React22.Fragment, {
    children: divisionRadius.map((r, index) => {
      const smallerRadius = divisionRadius[index - 1] ?? 0;
      return (0, import_jsx_runtime19.jsx)("path", {
        d: getPath2(center, r, smallerRadius),
        fillRule: "evenodd",
        fill: stripeColor?.(index) ?? "none",
        fillOpacity: 0.1,
        className: classes?.stripe
      }, r);
    })
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/radarGridClasses.js
function getRadarGridUtilityClass(slot) {
  return generateUtilityClass("MuiRadarGrid", slot);
}
var chartsGridClasses2 = generateUtilityClasses("MuiRadarGrid", ["radial", "divider", "stripe"]);
var useUtilityClasses4 = (classes) => {
  const slots = {
    radial: ["radial"],
    divider: ["divider"],
    stripe: ["stripe"]
  };
  return composeClasses(slots, getRadarGridUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/RadarChart/RadarGrid/RadarGrid.js
var import_jsx_runtime20 = __toESM(require_jsx_runtime(), 1);
function RadarGrid(props) {
  const theme = useTheme();
  const {
    divisions = 5,
    shape = "sharp",
    stripeColor = (index) => index % 2 === 1 ? (theme.vars || theme).palette.text.secondary : "none"
  } = props;
  const gridData = useRadarGridData();
  const classes = useUtilityClasses4(props.classes);
  if (gridData === null) {
    return null;
  }
  const {
    center,
    corners,
    radius
  } = gridData;
  return shape === "sharp" ? (0, import_jsx_runtime20.jsxs)(React23.Fragment, {
    children: [stripeColor && (0, import_jsx_runtime20.jsx)(SharpRadarStripes, {
      divisions,
      corners,
      center,
      radius,
      stripeColor,
      classes
    }), (0, import_jsx_runtime20.jsx)(SharpRadarGrid, {
      divisions,
      corners,
      center,
      radius,
      strokeColor: (theme.vars || theme).palette.text.primary,
      classes
    })]
  }) : (0, import_jsx_runtime20.jsxs)(React23.Fragment, {
    children: [stripeColor && (0, import_jsx_runtime20.jsx)(CircularRadarStripes, {
      divisions,
      corners,
      center,
      radius,
      stripeColor,
      classes
    }), (0, import_jsx_runtime20.jsx)(CircularRadarGrid, {
      divisions,
      corners,
      center,
      radius,
      strokeColor: (theme.vars || theme).palette.text.primary,
      classes
    })]
  });
}
true ? RadarGrid.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types13.default.object,
  /**
   * The number of divisions in the radar grid.
   * @default 5
   */
  divisions: import_prop_types13.default.number,
  /**
   * The grid shape.
   * @default 'sharp'
   */
  shape: import_prop_types13.default.oneOf(["circular", "sharp"]),
  /**
   * Get stripe fill color. Set it to `null` to remove stripes
   * @param {number} index The index of the stripe band.
   * @returns {string} The color to fill the stripe.
   * @default (index) => index % 2 === 1 ? (theme.vars || theme).palette.text.secondary : 'none'
   */
  stripeColor: import_prop_types13.default.func
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarDataProvider/RadarDataProvider.js
init_extends();
var React24 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarChart.plugins.js
var RADAR_PLUGINS = [useChartPolarAxis, useChartInteraction, useChartHighlight];

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/formatter.js
var formatter = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  return {
    seriesOrder,
    series: defaultizeValueFormatter(series, (v) => v == null ? "" : v.toLocaleString())
  };
};
var formatter_default = formatter;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/getColor.js
var getColor = (series) => {
  return () => series.color;
};
var getColor_default = getColor;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/extremums.js
var radiusExtremumGetter = ({
  series,
  axisIndex
}) => {
  return Object.keys(series).filter((seriesId) => series[seriesId].type === "radar").reduce((acc, seriesId) => {
    const {
      data
    } = series[seriesId];
    return [Math.min(data[axisIndex], acc[0]), Math.max(data[axisIndex], acc[1])];
  }, [Infinity, -Infinity]);
};
var rotationExtremumGetter = ({
  axis
}) => {
  const min = Math.min(...axis.data ?? []);
  const max = Math.max(...axis.data ?? []);
  return [min, max];
};

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/legend.js
var legendGetter = (params) => {
  const {
    seriesOrder,
    series
  } = params;
  return seriesOrder.reduce((acc, seriesId) => {
    const formattedLabel = getLabel(series[seriesId].label, "legend");
    if (formattedLabel === void 0) {
      return acc;
    }
    acc.push({
      id: seriesId,
      seriesId,
      color: series[seriesId].color,
      label: formattedLabel,
      markType: series[seriesId].labelMarkType ?? "square"
    });
    return acc;
  }, []);
};
var legend_default = legendGetter;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/tooltip.js
var tooltipGetter = (params) => {
  const {
    series,
    axesConfig,
    getColor: getColor2,
    identifier
  } = params;
  const rotationAxis = axesConfig.rotation;
  if (!identifier || !rotationAxis) {
    return null;
  }
  const label = getLabel(series.label, "tooltip");
  const formatter2 = (v) => rotationAxis.valueFormatter?.(v, {
    location: "tooltip",
    scale: rotationAxis.scale
  }) ?? (v == null ? "" : v.toLocaleString());
  return {
    identifier,
    color: getColor2(),
    label,
    markType: series.labelMarkType,
    values: series.data.map((value, dataIndex) => ({
      value,
      formattedValue: series.valueFormatter(value, {
        dataIndex
      }),
      markType: series.labelMarkType,
      label: formatter2(rotationAxis?.data?.[dataIndex])
    }))
  };
};
var axisTooltipGetter = (series) => {
  return Object.values(series).map(() => ({
    direction: "rotation",
    axisId: void 0
  }));
};
var tooltip_default = tooltipGetter;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/getSeriesWithDefaultValues.js
init_extends();
var getSeriesWithDefaultValues = (seriesData, seriesIndex, colors) => {
  return _extends({
    id: seriesData.id ?? `auto-generated-id-${seriesIndex}`,
    color: colors[seriesIndex % colors.length]
  }, seriesData);
};
var getSeriesWithDefaultValues_default = getSeriesWithDefaultValues;

// node_modules/@mui/x-charts/esm/RadarChart/seriesConfig/index.js
var radarSeriesConfig = {
  colorProcessor: getColor_default,
  seriesProcessor: formatter_default,
  legendGetter: legend_default,
  tooltipGetter: tooltip_default,
  axisTooltipGetter,
  getSeriesWithDefaultValues: getSeriesWithDefaultValues_default,
  radiusExtremumGetter,
  rotationExtremumGetter
};

// node_modules/@mui/x-charts/esm/RadarChart/RadarDataProvider/RadarDataProvider.js
var import_jsx_runtime21 = __toESM(require_jsx_runtime(), 1);
var _excluded11 = ["series", "children", "width", "height", "colors", "skipAnimation", "margin", "radar", "highlight", "plugins"];
var RADAR_SERIES_CONFIG = {
  radar: radarSeriesConfig
};
var DEFAULT_RADAR_MARGIN = {
  top: 30,
  bottom: 30,
  left: 50,
  right: 50
};
function RadarDataProvider(props) {
  const {
    series,
    children,
    width,
    height,
    colors,
    skipAnimation,
    margin,
    radar,
    highlight,
    plugins
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded11);
  const rotationAxes = React24.useMemo(() => [{
    id: "radar-rotation-axis",
    scaleType: "point",
    data: radar.metrics.map((metric) => typeof metric === "string" ? metric : metric.name),
    startAngle: radar.startAngle,
    endAngle: radar.startAngle !== void 0 ? radar.startAngle + 360 : void 0,
    labelGap: radar.labelGap,
    valueFormatter: (name, {
      location
    }) => radar.labelFormatter?.(name, {
      location
    }) ?? name
  }], [radar]);
  const radiusAxis = React24.useMemo(() => radar.metrics.map((m) => {
    const {
      name,
      min = 0,
      max = radar.max
    } = typeof m === "string" ? {
      name: m
    } : m;
    return {
      id: name,
      label: name,
      scaleType: "linear",
      min,
      max
    };
  }), [radar]);
  const defaultizedSeries = React24.useMemo(() => series.map((s) => _extends({
    type: "radar",
    highlightScope: s.highlightScope ?? (highlight === "series" ? {
      highlight: "series",
      fade: "global"
    } : void 0)
  }, s)), [series, highlight]);
  const defaultizedMargin = React24.useMemo(() => defaultizeMargin(margin, DEFAULT_RADAR_MARGIN), [margin]);
  return (0, import_jsx_runtime21.jsx)(ChartDataProvider, _extends({}, other, {
    series: defaultizedSeries,
    width,
    height,
    margin: defaultizedMargin,
    colors,
    skipAnimation,
    plugins: plugins ?? RADAR_PLUGINS,
    rotationAxis: rotationAxes,
    radiusAxis,
    seriesConfig: RADAR_SERIES_CONFIG,
    children
  }));
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesPlot.js
init_extends();
var React28 = __toESM(require_react(), 1);
var import_prop_types16 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/useRadarSeriesData.js
init_extends();
function useRadarSeriesData(querySeriesId) {
  const {
    instance
  } = useChartContext();
  const rotationScale = useRotationScale();
  const {
    radiusAxis
  } = useRadiusAxes();
  const radarSeries = useRadarSeries(querySeriesId === void 0 ? void 0 : [querySeriesId]);
  const {
    isFaded: isItemFaded,
    isHighlighted: isItemHighlighted
  } = useItemHighlightedGetter();
  const metrics = rotationScale?.domain() ?? [];
  const angles = metrics.map((key) => rotationScale(key));
  return radarSeries.map((series) => {
    const seriesId = series.id;
    const isSeriesHighlighted = isItemHighlighted({
      seriesId
    });
    const isSeriesFaded = !isSeriesHighlighted && isItemFaded({
      seriesId
    });
    return _extends({}, series, {
      seriesId: series.id,
      isSeriesHighlighted,
      isSeriesFaded,
      points: series.data.map((value, dataIndex) => {
        const highlighted = isItemHighlighted({
          seriesId,
          dataIndex
        });
        const faded = !highlighted && isItemFaded({
          seriesId,
          dataIndex
        });
        const r = radiusAxis[metrics[dataIndex]].scale(value);
        const angle = angles[dataIndex];
        const [x, y] = instance.polar2svg(r, angle);
        return {
          x,
          y,
          isItemHighlighted: highlighted,
          isItemFaded: faded,
          dataIndex
        };
      })
    });
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/radarSeriesPlotClasses.js
function getRadarSeriesPlotUtilityClass(slot) {
  return generateUtilityClass("MuiRadarSeriesPlot", slot);
}
var radarSeriesPlotClasses = generateUtilityClasses("MuiRadarSeriesPlot", ["root", "area", "mark", "highlighted", "faded"]);
var useUtilityClasses5 = (classes) => {
  const slots = {
    root: ["root"],
    area: ["area"],
    mark: ["mark"],
    highlighted: ["highlighted"],
    faded: ["faded"]
  };
  return composeClasses(slots, getRadarSeriesPlotUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesArea.js
init_extends();
var React26 = __toESM(require_react(), 1);
var import_prop_types14 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/getAreaPath.js
function getAreaPath(points) {
  return `M ${points.map((p) => `${p.x} ${p.y}`).join("L")} Z`;
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/useRadarRotationIndex.js
var React25 = __toESM(require_react(), 1);
function useRadarRotationIndex() {
  const svgRef = useSvgRef();
  const store = useStore();
  const rotationAxis = useRotationAxis();
  const center = useSelector(store, selectorChartPolarCenter);
  const rotationIndexGetter = React25.useCallback(function rotationIndexGetter2(event) {
    const element = svgRef.current;
    if (!element || !rotationAxis) {
      throw new Error(`MUI X Charts: The ${!element ? "SVG" : "rotation axis"} was not found to compute radar dataIndex.`);
    }
    const svgPoint = getSVGPoint(element, event);
    const rotation = generateSvg2rotation(center)(svgPoint.x, svgPoint.y);
    const rotationIndex = getAxisIndex(rotationAxis, rotation);
    return rotationIndex;
  }, [center, rotationAxis, svgRef]);
  return rotationIndexGetter;
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesArea.js
var import_jsx_runtime22 = __toESM(require_jsx_runtime(), 1);
var _excluded12 = ["seriesId", "onItemClick"];
function getPathProps(params) {
  const {
    isHighlighted,
    isFaded,
    seriesId,
    classes,
    points,
    fillArea,
    color
  } = params;
  const isItemHighlighted = isHighlighted({
    seriesId
  });
  const isItemFaded = !isItemHighlighted && isFaded({
    seriesId
  });
  return {
    d: getAreaPath(points),
    fill: fillArea ? color : "transparent",
    stroke: color,
    className: clsx_default(classes.area, isItemHighlighted && classes.highlighted || isItemFaded && classes.faded),
    strokeOpacity: isItemFaded ? 0.5 : 1,
    fillOpacity: isItemHighlighted && 0.4 || isItemFaded && 0.1 || 0.2,
    strokeWidth: !fillArea && isItemHighlighted ? 2 : 1
  };
}
function RadarSeriesArea(props) {
  const {
    seriesId,
    onItemClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded12);
  const seriesCoordinates = useRadarSeriesData(seriesId);
  const getRotationIndex = useRadarRotationIndex();
  const interactionProps = useInteractionAllItemProps(seriesCoordinates);
  const {
    isFaded,
    isHighlighted
  } = useItemHighlightedGetter();
  const classes = useUtilityClasses5(props.classes);
  return (0, import_jsx_runtime22.jsx)(React26.Fragment, {
    children: seriesCoordinates?.map(({
      seriesId: id,
      points,
      color,
      fillArea
    }, seriesIndex) => {
      return (0, import_jsx_runtime22.jsx)("path", _extends({}, getPathProps({
        seriesId: id,
        points,
        color,
        fillArea,
        isFaded,
        isHighlighted,
        classes
      }), {
        onClick: (event) => onItemClick?.(event, {
          type: "radar",
          seriesId: id,
          dataIndex: getRotationIndex(event)
        }),
        cursor: onItemClick ? "pointer" : "unset"
      }, interactionProps[seriesIndex], other), id);
    })
  });
}
true ? RadarSeriesArea.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types14.default.object,
  /**
   * Callback fired when an area is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {RadarItemIdentifier} radarItemIdentifier The radar item identifier.
   */
  onItemClick: import_prop_types14.default.func,
  /**
   * The id of the series to display.
   * If undefined all series are displayed.
   */
  seriesId: import_prop_types14.default.string
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesMarks.js
init_extends();
var React27 = __toESM(require_react(), 1);
var import_prop_types15 = __toESM(require_prop_types(), 1);
var import_jsx_runtime23 = __toESM(require_jsx_runtime(), 1);
var _excluded13 = ["seriesId", "onItemClick"];
function getCircleProps(params) {
  const {
    isHighlighted,
    isFaded,
    seriesId,
    classes,
    point,
    fillArea,
    color
  } = params;
  const isItemHighlighted = isHighlighted({
    seriesId
  });
  const isItemFaded = !isItemHighlighted && isFaded({
    seriesId
  });
  return {
    cx: point.x,
    cy: point.y,
    r: 3,
    fill: color,
    stroke: color,
    opacity: fillArea && isItemFaded ? 0.5 : 1,
    className: clsx(classes.mark, isItemHighlighted && classes.highlighted || isItemFaded && classes.faded)
  };
}
function RadarSeriesMarks(props) {
  const {
    onItemClick
  } = props, other = _objectWithoutPropertiesLoose(props, _excluded13);
  const seriesCoordinates = useRadarSeriesData(props.seriesId);
  const classes = useUtilityClasses5(props.classes);
  const {
    isFaded,
    isHighlighted
  } = useItemHighlightedGetter();
  return (0, import_jsx_runtime23.jsx)(React27.Fragment, {
    children: seriesCoordinates?.map(({
      seriesId: id,
      points,
      color,
      hideMark,
      fillArea
    }) => {
      if (hideMark) {
        return null;
      }
      return (0, import_jsx_runtime23.jsx)("g", {
        children: points.map((point, index) => (0, import_jsx_runtime23.jsx)("circle", _extends({}, getCircleProps({
          seriesId: id,
          point,
          color,
          fillArea,
          isFaded,
          isHighlighted,
          classes
        }), {
          pointerEvents: onItemClick ? void 0 : "none",
          onClick: (event) => onItemClick?.(event, {
            type: "radar",
            seriesId: id,
            dataIndex: index
          }),
          cursor: onItemClick ? "pointer" : "unset"
        }, other), index))
      }, id);
    })
  });
}
true ? RadarSeriesMarks.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types15.default.object,
  /**
   * Callback fired when a mark is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {RadarItemIdentifier} radarItemIdentifier The radar item identifier.
   */
  onItemClick: import_prop_types15.default.func,
  /**
   * The id of the series to display.
   * If undefined all series are displayed.
   */
  seriesId: import_prop_types15.default.string
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarSeriesPlot/RadarSeriesPlot.js
var import_jsx_runtime24 = __toESM(require_jsx_runtime(), 1);
function RadarSeriesPlot(props) {
  const {
    seriesId: inSeriesId,
    classes: inClasses,
    onAreaClick,
    onMarkClick
  } = props;
  const seriesCoordinates = useRadarSeriesData(inSeriesId);
  const getRotationIndex = useRadarRotationIndex();
  const interactionProps = useInteractionAllItemProps(seriesCoordinates);
  const {
    isFaded,
    isHighlighted
  } = useItemHighlightedGetter();
  const classes = useUtilityClasses5(inClasses);
  return (0, import_jsx_runtime24.jsx)("g", {
    className: classes.root,
    children: seriesCoordinates?.map(({
      seriesId,
      points,
      color,
      hideMark,
      fillArea
    }, seriesIndex) => {
      return (0, import_jsx_runtime24.jsxs)("g", {
        children: [(0, import_jsx_runtime24.jsx)("path", _extends({}, getPathProps({
          seriesId,
          points,
          color,
          fillArea,
          isFaded,
          isHighlighted,
          classes
        }), {
          onClick: (event) => onAreaClick?.(event, {
            type: "radar",
            seriesId,
            dataIndex: getRotationIndex(event)
          }),
          cursor: onAreaClick ? "pointer" : "unset"
        }, interactionProps[seriesIndex]), seriesId), !hideMark && points.map((point, index) => (0, import_jsx_runtime24.jsx)("circle", _extends({}, getCircleProps({
          seriesId,
          point,
          color,
          fillArea,
          isFaded,
          isHighlighted,
          classes
        }), {
          onClick: (event) => onMarkClick?.(event, {
            type: "radar",
            seriesId,
            dataIndex: index
          }),
          cursor: onMarkClick ? "pointer" : "unset"
        }), index))]
      }, seriesId);
    })
  });
}
true ? RadarSeriesPlot.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types16.default.object,
  /**
   * Callback fired when an area is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {RadarItemIdentifier} radarItemIdentifier The radar item identifier.
   */
  onAreaClick: import_prop_types16.default.func,
  /**
   * Callback fired when a mark is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {RadarItemIdentifier} radarItemIdentifier The radar item identifier.
   */
  onMarkClick: import_prop_types16.default.func,
  /**
   * The id of the series to display.
   * If undefined all series are displayed.
   */
  seriesId: import_prop_types16.default.string
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxisHighlight/RadarAxisHighlight.js
init_extends();
var React29 = __toESM(require_react(), 1);
var import_prop_types17 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxisHighlight/useRadarAxisHighlight.js
function useRadarAxisHighlight() {
  const radarSeries = useRadarSeries();
  const rotationScale = useRotationScale();
  const {
    radiusAxis,
    radiusAxisIds
  } = useRadiusAxes();
  const {
    instance
  } = useChartContext();
  const store = useStore();
  const rotationAxisIndex = useSelector(store, selectorChartsInteractionRotationAxisIndex);
  const rotationAxisValue = useSelector(store, selectorChartsInteractionRotationAxisValue);
  const center = useSelector(store, selectorChartPolarCenter);
  const highlightedIndex = rotationAxisIndex;
  if (!rotationScale) {
    return null;
  }
  if (highlightedIndex === null || highlightedIndex === -1) {
    return null;
  }
  if (radarSeries === void 0 || radarSeries.length === 0) {
    return null;
  }
  const metric = radiusAxisIds[highlightedIndex];
  const radiusScale = radiusAxis[metric].scale;
  const angle = rotationScale(rotationAxisValue);
  const radius = radiusScale.range()[1];
  return {
    center,
    radius,
    instance,
    highlightedIndex,
    highlightedMetric: metric,
    highlightedAngle: angle,
    series: radarSeries,
    points: radarSeries.map((series) => {
      const value = series.data[highlightedIndex];
      const r = radiusScale(value);
      const [x, y] = instance.polar2svg(r, angle);
      const returnedValue = {
        x,
        y,
        r,
        angle,
        value
      };
      return returnedValue;
    })
  };
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxisHighlight/radarAxisHighlightClasses.js
function getRadarAxisHighlightUtilityClass(slot) {
  return generateUtilityClass("MuiRadarAxisHighlight", slot);
}
var chartsAxisHighlightClasses2 = generateUtilityClasses("MuiRadarAxisHighlight", ["root", "line", "dot"]);

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxisHighlight/RadarAxisHighlight.js
var import_jsx_runtime25 = __toESM(require_jsx_runtime(), 1);
var useUtilityClasses6 = (classes) => {
  const slots = {
    root: ["root"],
    line: ["line"],
    dot: ["dot"]
  };
  return composeClasses(slots, getRadarAxisHighlightUtilityClass, classes);
};
var highlightMarkShadow = {
  r: 7,
  opacity: 0.3
};
var highlightMark = {
  r: 3,
  opacity: 1
};
function RadarAxisHighlight(props) {
  const classes = useUtilityClasses6(props.classes);
  const theme = useTheme();
  const data = useRadarAxisHighlight();
  if (data === null) {
    return null;
  }
  const {
    center,
    series,
    points,
    radius,
    highlightedAngle,
    instance
  } = data;
  const [x, y] = instance.polar2svg(radius, highlightedAngle);
  return (0, import_jsx_runtime25.jsxs)("g", {
    className: classes.root,
    children: [(0, import_jsx_runtime25.jsx)("path", {
      d: `M ${center.cx} ${center.cy} L ${x} ${y}`,
      stroke: (theme.vars || theme).palette.text.primary,
      strokeWidth: 1,
      className: classes.line,
      pointerEvents: "none",
      strokeDasharray: "4 4"
    }), points.map((point, seriesIndex) => {
      return (0, import_jsx_runtime25.jsx)("circle", _extends({
        fill: series[seriesIndex].color,
        cx: point.x,
        cy: point.y,
        className: classes.dot,
        pointerEvents: "none"
      }, series[seriesIndex].hideMark ? highlightMark : highlightMarkShadow), series[seriesIndex].id);
    })]
  });
}
true ? RadarAxisHighlight.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types17.default.object
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarMetricLabels/RadarMetricLabels.js
init_extends();
var React30 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarMetricLabels/useRadarMetricData.js
function useRadarMetricData() {
  const rotationAxis = useRotationAxis();
  const {
    scale: rotationScale,
    valueFormatter,
    labelGap = 10
  } = rotationAxis;
  const {
    radiusAxis
  } = useRadiusAxes();
  const drawingArea = useDrawingArea();
  const cx = drawingArea.left + drawingArea.width / 2;
  const cy = drawingArea.top + drawingArea.height / 2;
  const metrics = rotationScale.domain();
  const angles = metrics.map((key) => rotationScale(key));
  return {
    corners: metrics.map((metric, dataIndex) => {
      const radiusScale = radiusAxis[metric].scale;
      const r = radiusScale.range()[1] + labelGap;
      const angle = angles[dataIndex];
      const defaultTickLabel = metric;
      return {
        x: cx + r * Math.sin(angle),
        y: cy - r * Math.cos(angle),
        angle: rad2deg(angle),
        label: valueFormatter?.(metric, {
          location: "tick",
          scale: rotationScale,
          defaultTickLabel
        }) ?? defaultTickLabel
      };
    })
  };
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarMetricLabels/RadarMetricLabels.js
var import_jsx_runtime26 = __toESM(require_jsx_runtime(), 1);
function RadarMetricLabels() {
  const {
    corners
  } = useRadarMetricData();
  const theme = useTheme();
  return (0, import_jsx_runtime26.jsx)(React30.Fragment, {
    children: corners.map(({
      x,
      y,
      angle,
      label
    }, i) => (0, import_jsx_runtime26.jsx)(ChartsText, {
      x,
      y,
      fontSize: 14,
      fill: (theme.vars || theme).palette.text.primary,
      stroke: "none",
      text: label,
      style: _extends({}, theme.typography.caption, {
        fontSize: 12,
        lineHeight: 1.25,
        textAnchor: getDefaultTextAnchor(180 + angle),
        dominantBaseline: getDefaultBaseline(180 + angle)
      })
    }, i))
  });
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarChart.js
var import_jsx_runtime27 = __toESM(require_jsx_runtime(), 1);
var RadarChart = React31.forwardRef(function RadarChart2(inProps, ref) {
  const props = useThemeProps({
    props: inProps,
    name: "MuiRadarChart"
  });
  const {
    chartsWrapperProps,
    chartsSurfaceProps,
    radarDataProviderProps,
    radarGrid,
    radarSeriesAreaProps,
    radarSeriesMarksProps,
    overlayProps,
    legendProps,
    highlight,
    children
  } = useRadarChartProps(props);
  const Tooltip = props.slots?.tooltip ?? ChartsTooltip;
  const Toolbar2 = props.slots?.toolbar;
  return (0, import_jsx_runtime27.jsx)(RadarDataProvider, _extends({}, radarDataProviderProps, {
    children: (0, import_jsx_runtime27.jsxs)(ChartsWrapper, _extends({}, chartsWrapperProps, {
      children: [props.showToolbar && Toolbar2 ? (0, import_jsx_runtime27.jsx)(Toolbar2, _extends({}, props.slotProps?.toolbar)) : null, !props.hideLegend && (0, import_jsx_runtime27.jsx)(ChartsLegend, _extends({}, legendProps)), (0, import_jsx_runtime27.jsxs)(ChartsSurface, _extends({}, chartsSurfaceProps, {
        ref,
        children: [(0, import_jsx_runtime27.jsx)(RadarGrid, _extends({}, radarGrid)), (0, import_jsx_runtime27.jsx)(RadarMetricLabels, {}), (0, import_jsx_runtime27.jsx)(RadarSeriesArea, _extends({}, radarSeriesAreaProps)), highlight === "axis" && (0, import_jsx_runtime27.jsx)(RadarAxisHighlight, {}), (0, import_jsx_runtime27.jsx)(RadarSeriesMarks, _extends({}, radarSeriesMarksProps)), (0, import_jsx_runtime27.jsx)(ChartsOverlay, _extends({}, overlayProps)), children]
      })), !props.loading && (0, import_jsx_runtime27.jsx)(Tooltip, _extends({}, props.slotProps?.tooltip))]
    }))
  }));
});
if (true) RadarChart.displayName = "RadarChart";
true ? RadarChart.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types18.default.shape({
    current: import_prop_types18.default.object
  }),
  className: import_prop_types18.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.string), import_prop_types18.default.func]),
  desc: import_prop_types18.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types18.default.bool,
  /**
   * The number of divisions in the radar grid.
   * @default 5
   */
  divisions: import_prop_types18.default.number,
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types18.default.number,
  /**
   * If `true`, the legend is not rendered.
   */
  hideLegend: import_prop_types18.default.bool,
  /**
   * Indicates if the chart should highlight items per axis or per series.
   * @default 'axis'
   */
  highlight: import_prop_types18.default.oneOf(["axis", "none", "series"]),
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types18.default.shape({
    dataIndex: import_prop_types18.default.number,
    seriesId: import_prop_types18.default.oneOfType([import_prop_types18.default.number, import_prop_types18.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types18.default.string,
  /**
   * If `true`, a loading overlay is displayed.
   * @default false
   */
  loading: import_prop_types18.default.bool,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types18.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types18.default.oneOfType([import_prop_types18.default.number, import_prop_types18.default.shape({
    bottom: import_prop_types18.default.number,
    left: import_prop_types18.default.number,
    right: import_prop_types18.default.number,
    top: import_prop_types18.default.number
  })]),
  /**
   * Callback fired when an area is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {RadarItemIdentifier} radarItemIdentifier The radar item identifier.
   */
  onAreaClick: import_prop_types18.default.func,
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | ChartsAxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types18.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types18.default.func,
  /**
   * Callback fired when a mark is clicked.
   * @param {React.MouseEvent<SVGPathElement, MouseEvent>} event The event source of the callback.
   * @param {RadarItemIdentifier} radarItemIdentifier The radar item identifier.
   */
  onMarkClick: import_prop_types18.default.func,
  /**
   * The configuration of the radar scales.
   */
  radar: import_prop_types18.default.shape({
    labelFormatter: import_prop_types18.default.func,
    labelGap: import_prop_types18.default.number,
    max: import_prop_types18.default.number,
    metrics: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.string), import_prop_types18.default.arrayOf(import_prop_types18.default.shape({
      max: import_prop_types18.default.number,
      min: import_prop_types18.default.number,
      name: import_prop_types18.default.string.isRequired
    }))]).isRequired,
    startAngle: import_prop_types18.default.number
  }).isRequired,
  /**
   * The series to display in the bar chart.
   * An array of [[RadarSeries]] objects.
   */
  series: import_prop_types18.default.arrayOf(import_prop_types18.default.object).isRequired,
  /**
   * The grid shape.
   * @default 'sharp'
   */
  shape: import_prop_types18.default.oneOf(["circular", "sharp"]),
  /**
   * If true, shows the default chart toolbar.
   * @default false
   */
  showToolbar: import_prop_types18.default.bool,
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types18.default.bool,
  /**
   * The props used for each component slot.
   * @default {}
   */
  slotProps: import_prop_types18.default.object,
  /**
   * Overridable component slots.
   * @default {}
   */
  slots: import_prop_types18.default.object,
  /**
   * Get stripe fill color. Set it to `null` to remove stripes
   * @param {number} index The index of the stripe band.
   * @returns {string} The color to fill the stripe.
   * @default (index) => index % 2 === 1 ? (theme.vars || theme).palette.text.secondary : 'none'
   */
  stripeColor: import_prop_types18.default.func,
  sx: import_prop_types18.default.oneOfType([import_prop_types18.default.arrayOf(import_prop_types18.default.oneOfType([import_prop_types18.default.func, import_prop_types18.default.object, import_prop_types18.default.bool])), import_prop_types18.default.func, import_prop_types18.default.object]),
  theme: import_prop_types18.default.oneOf(["dark", "light"]),
  title: import_prop_types18.default.string,
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types18.default.number
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxis/RadarAxis.js
init_extends();
var React32 = __toESM(require_react(), 1);
var import_prop_types19 = __toESM(require_prop_types(), 1);

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxis/useRadarAxis.js
function useRadarAxis(params) {
  const {
    metric,
    angle,
    divisions = 1
  } = params;
  const {
    instance,
    store
  } = useChartContext();
  const rotationScale = useRotationScale();
  const {
    radiusAxis
  } = useRadiusAxes();
  const {
    cx,
    cy
  } = useSelector(store, selectorChartPolarCenter);
  if (metric === void 0 || !rotationScale || rotationScale.domain().length === 0) {
    return null;
  }
  const existingMetrics = rotationScale.domain();
  if (!existingMetrics.includes(metric)) {
    warnOnce([`MUI X Charts: You radar axis try displaying values for the metric "${metric}" which does nto exist.`, `either add this metric to your radar, or pick one from the existing metrics: ${existingMetrics.join(", ")}`]);
  }
  const anglesWithDefault = angle !== void 0 ? degToRad(angle) : rotationScale(metric) ?? 0;
  const radiusRatio = Array.from({
    length: divisions
  }, (_, index) => (index + 1) / divisions);
  const radiusScale = radiusAxis[metric].scale;
  const R = radiusScale.range()[1];
  if (isOrdinalScale(radiusScale)) {
    if (true) {
      console.error("MUI X Charts: Radar chart does not support ordinal axes");
    }
    return null;
  }
  return {
    metric,
    angle: clampAngle(rad2deg(anglesWithDefault)),
    center: {
      x: cx,
      y: cy
    },
    labels: radiusRatio.map((ratio) => {
      const radius = ratio * R;
      const [x, y] = instance.polar2svg(radius, anglesWithDefault);
      const value = radiusScale.invert(radius);
      const defaultTickLabel = value.toString();
      return {
        x,
        y,
        value,
        formattedValue: radiusAxis[metric].valueFormatter?.(radiusScale.invert(radius), {
          location: "tick",
          scale: radiusScale,
          defaultTickLabel,
          tickNumber: divisions
        }) ?? defaultTickLabel
      };
    })
  };
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxis/RadarAxis.utils.js
function getTextAnchor(angle) {
  if (angle < 20) {
    return "start";
  }
  if (angle < 90 - 10) {
    return "end";
  }
  if (angle < 270 - 10) {
    return "start";
  }
  if (angle < 360 - 20) {
    return "end";
  }
  return "start";
}
function getDominantBaseline(angle) {
  if (angle < 160) {
    return "auto";
  }
  if (angle < 360 - 20) {
    return "hanging";
  }
  return "auto";
}
var LABEL_MARGIN = 2;
function getLabelAttributes(params) {
  const {
    x,
    y,
    angle
  } = params;
  if (params.labelOrientation === "horizontal") {
    const textAnchor2 = typeof params.textAnchor === "function" ? params.textAnchor(angle) : params.textAnchor ?? getTextAnchor(angle);
    const dominantBaseline2 = typeof params.dominantBaseline === "function" ? params.dominantBaseline(angle) : params.dominantBaseline ?? getDominantBaseline(angle);
    const marginX = textAnchor2 === "start" ? LABEL_MARGIN : -LABEL_MARGIN;
    const marginY = dominantBaseline2 === "auto" ? -LABEL_MARGIN : LABEL_MARGIN;
    return {
      x: x + marginX,
      y: y + marginY,
      textAnchor: textAnchor2,
      dominantBaseline: dominantBaseline2
    };
  }
  const textAnchor = typeof params.textAnchor === "function" ? params.textAnchor(angle) : params.textAnchor ?? "start";
  const dominantBaseline = typeof params.dominantBaseline === "function" ? params.dominantBaseline(angle) : params.dominantBaseline ?? "auto";
  return {
    x,
    y,
    textAnchor,
    dominantBaseline,
    transform: `rotate(${angle}, ${x}, ${y})`
  };
}

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxis/radarAxisClasses.js
function getRadarAxisUtilityClass(slot) {
  return generateUtilityClass("MuiRadarAxis", slot);
}
var chartsAxisClasses = generateUtilityClasses("MuiRadarAxis", ["root", "line", "label"]);
var useUtilityClasses7 = (classes) => {
  const slots = {
    root: ["root"],
    line: ["line"],
    label: ["label"]
  };
  return composeClasses(slots, getRadarAxisUtilityClass, classes);
};

// node_modules/@mui/x-charts/esm/RadarChart/RadarAxis/RadarAxis.js
var import_jsx_runtime28 = __toESM(require_jsx_runtime(), 1);
function RadarAxis(props) {
  const {
    labelOrientation = "horizontal",
    textAnchor,
    dominantBaseline
  } = props;
  const classes = useUtilityClasses7(props.classes);
  const theme = useTheme();
  const data = useRadarAxis(props);
  if (data === null) {
    return null;
  }
  const {
    center,
    angle,
    labels
  } = data;
  return (0, import_jsx_runtime28.jsxs)("g", {
    className: classes.root,
    children: [(0, import_jsx_runtime28.jsx)("path", {
      d: `M ${center.x} ${center.y} L ${labels[labels.length - 1].x} ${labels[labels.length - 1].y}`,
      stroke: (theme.vars ?? theme).palette.text.primary,
      strokeOpacity: 0.3,
      className: classes.line
    }), labels.map(({
      x,
      y,
      formattedValue
    }) => (0, import_jsx_runtime28.jsx)("text", _extends({
      fontSize: 12,
      fill: (theme.vars ?? theme).palette.text.primary,
      stroke: "none",
      className: classes.label
    }, getLabelAttributes({
      labelOrientation,
      x,
      y,
      angle,
      textAnchor,
      dominantBaseline
    }), {
      children: formattedValue
    }), formattedValue))]
  });
}
true ? RadarAxis.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  /**
   * The absolute rotation angle of the metrics (in degree)
   * If not defined the metric angle will be used.
   */
  angle: import_prop_types19.default.number,
  /**
   * Override or extend the styles applied to the component.
   */
  classes: import_prop_types19.default.object,
  /**
   * The number of divisions with label.
   * @default 1
   */
  divisions: import_prop_types19.default.number,
  /**
   * The labels dominant baseline or a function returning the dominant baseline for a given axis angle (in degree).
   */
  dominantBaseline: import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf(["alphabetic", "auto", "central", "hanging", "ideographic", "inherit", "mathematical", "middle", "no-change", "reset-size", "text-after-edge", "text-before-edge", "use-script"]), import_prop_types19.default.func]),
  /**
   * Defines how label align with the axis.
   * - 'horizontal': labels stay horizontal and their placement change with the axis angle.
   * - 'rotated': labels are rotated 90deg relatively to their axis.
   * @default 'horizontal'
   */
  labelOrientation: import_prop_types19.default.oneOf(["horizontal", "rotated"]),
  /**
   * The metric to get.
   * If `undefined`, the hook returns `null`
   */
  metric: import_prop_types19.default.string,
  /**
   * The labels text anchor or a function returning the text anchor for a given axis angle (in degree).
   */
  textAnchor: import_prop_types19.default.oneOfType([import_prop_types19.default.oneOf(["end", "inherit", "middle", "start"]), import_prop_types19.default.func])
} : void 0;

// node_modules/@mui/x-charts/esm/RadarChart/index.js
var Unstable_RadarChart = RadarChart;
var Unstable_RadarDataProvider = RadarDataProvider;

// node_modules/@mui/x-charts/esm/ChartContainer/ChartContainer.js
init_extends();
var React33 = __toESM(require_react(), 1);
var import_prop_types20 = __toESM(require_prop_types(), 1);
var import_jsx_runtime29 = __toESM(require_jsx_runtime(), 1);
var ChartContainer = React33.forwardRef(function ChartContainer2(props, ref) {
  const {
    chartDataProviderProps,
    children,
    chartsSurfaceProps
  } = useChartContainerProps(props, ref);
  return (0, import_jsx_runtime29.jsx)(ChartDataProvider, _extends({}, chartDataProviderProps, {
    children: (0, import_jsx_runtime29.jsx)(ChartsSurface, _extends({}, chartsSurfaceProps, {
      children
    }))
  }));
});
if (true) ChartContainer.displayName = "ChartContainer";
true ? ChartContainer.propTypes = {
  // ----------------------------- Warning --------------------------------
  // | These PropTypes are generated from the TypeScript type definitions |
  // | To update them edit the TypeScript types and run "pnpm proptypes"  |
  // ----------------------------------------------------------------------
  apiRef: import_prop_types20.default.shape({
    current: import_prop_types20.default.object
  }),
  /**
   * Configuration for the brush interaction.
   */
  brushConfig: import_prop_types20.default.shape({
    enabled: import_prop_types20.default.bool,
    preventHighlight: import_prop_types20.default.bool,
    preventTooltip: import_prop_types20.default.bool
  }),
  children: import_prop_types20.default.node,
  className: import_prop_types20.default.string,
  /**
   * Color palette used to colorize multiple series.
   * @default rainbowSurgePalette
   */
  colors: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string), import_prop_types20.default.func]),
  /**
   * An array of objects that can be used to populate series and axes data using their `dataKey` property.
   */
  dataset: import_prop_types20.default.arrayOf(import_prop_types20.default.object),
  desc: import_prop_types20.default.string,
  /**
   * If `true`, the charts will not listen to the mouse move event.
   * It might break interactive features, but will improve performance.
   * @default false
   */
  disableAxisListener: import_prop_types20.default.bool,
  /**
   * If true, the voronoi interaction are ignored.
   */
  disableVoronoi: import_prop_types20.default.bool,
  enableKeyboardNavigation: import_prop_types20.default.bool,
  /**
   * Options to enable features planned for the next major.
   */
  experimentalFeatures: import_prop_types20.default.shape({
    preferStrictDomainInLineCharts: import_prop_types20.default.bool
  }),
  /**
   * The height of the chart in px. If not defined, it takes the height of the parent element.
   */
  height: import_prop_types20.default.number,
  /**
   * The controlled axis highlight.
   * Identified by the axis id, and data index.
   */
  highlightedAxis: import_prop_types20.default.arrayOf(import_prop_types20.default.shape({
    axisId: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]).isRequired,
    dataIndex: import_prop_types20.default.number.isRequired
  })),
  /**
   * The highlighted item.
   * Used when the highlight is controlled.
   */
  highlightedItem: import_prop_types20.default.shape({
    dataIndex: import_prop_types20.default.number,
    seriesId: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]).isRequired
  }),
  /**
   * This prop is used to help implement the accessibility logic.
   * If you don't provide this prop. It falls back to a randomly generated id.
   */
  id: import_prop_types20.default.string,
  /**
   * Localized text for chart components.
   */
  localeText: import_prop_types20.default.object,
  /**
   * The margin between the SVG and the drawing area.
   * It's used for leaving some space for extra information such as the x- and y-axis or legend.
   *
   * Accepts a `number` to be used on all sides or an object with the optional properties: `top`, `bottom`, `left`, and `right`.
   */
  margin: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
    bottom: import_prop_types20.default.number,
    left: import_prop_types20.default.number,
    right: import_prop_types20.default.number,
    top: import_prop_types20.default.number
  })]),
  /**
   * The function called for onClick events.
   * The second argument contains information about all line/bar elements at the current mouse position.
   * @param {MouseEvent} event The mouse event recorded on the `<svg/>` element.
   * @param {null | ChartsAxisData} data The data about the clicked axis and items associated with it.
   */
  onAxisClick: import_prop_types20.default.func,
  /**
   * The callback fired when the highlighted item changes.
   *
   * @param {HighlightItemData | null} highlightedItem  The newly highlighted item.
   */
  onHighlightChange: import_prop_types20.default.func,
  /**
   * The function called when the pointer position corresponds to a new axis data item.
   * This update can either be caused by a pointer movement, or an axis update.
   * In case of multiple axes, the function is called if at least one axis is updated.
   * The argument contains the identifier for all axes with a `data` property.
   * @param {AxisItemIdentifier[]} axisItems The array of axes item identifiers.
   */
  onHighlightedAxisChange: import_prop_types20.default.func,
  /**
   * Callback fired when clicking close to an item.
   * This is only available for scatter plot for now.
   * @param {MouseEvent} event Mouse event caught at the svg level
   * @param {ScatterItemIdentifier} scatterItemIdentifier Identify which item got clicked
   */
  onItemClick: import_prop_types20.default.func,
  /**
   * The configuration of the radial-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  radiusAxis: import_prop_types20.default.arrayOf(import_prop_types20.default.shape({
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]).isRequired,
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    maxRadius: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    minRadius: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["linear"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  })),
  /**
   * The configuration of the rotation-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  rotationAxis: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
    barGapRatio: import_prop_types20.default.number,
    categoryGapRatio: import_prop_types20.default.number,
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      type: import_prop_types20.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types20.default.string,
      values: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number, import_prop_types20.default.string]).isRequired)
    }), import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    endAngle: import_prop_types20.default.number,
    groups: import_prop_types20.default.arrayOf(import_prop_types20.default.shape({
      getValue: import_prop_types20.default.func.isRequired,
      tickLabelStyle: import_prop_types20.default.object,
      tickSize: import_prop_types20.default.number
    })),
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]).isRequired,
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelGap: import_prop_types20.default.number,
    labelStyle: import_prop_types20.default.object,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["band"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    startAngle: import_prop_types20.default.number,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      type: import_prop_types20.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types20.default.string,
      values: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number, import_prop_types20.default.string]).isRequired)
    }), import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    endAngle: import_prop_types20.default.number,
    groups: import_prop_types20.default.arrayOf(import_prop_types20.default.shape({
      getValue: import_prop_types20.default.func.isRequired,
      tickLabelStyle: import_prop_types20.default.object,
      tickSize: import_prop_types20.default.number
    })),
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]).isRequired,
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelGap: import_prop_types20.default.number,
    labelStyle: import_prop_types20.default.object,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["point"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    startAngle: import_prop_types20.default.number,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    endAngle: import_prop_types20.default.number,
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]).isRequired,
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelGap: import_prop_types20.default.number,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["log"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    startAngle: import_prop_types20.default.number,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    constant: import_prop_types20.default.number,
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    endAngle: import_prop_types20.default.number,
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]).isRequired,
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelGap: import_prop_types20.default.number,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["symlog"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    startAngle: import_prop_types20.default.number,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    endAngle: import_prop_types20.default.number,
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]).isRequired,
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelGap: import_prop_types20.default.number,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["pow"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    startAngle: import_prop_types20.default.number,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    endAngle: import_prop_types20.default.number,
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]).isRequired,
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelGap: import_prop_types20.default.number,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["sqrt"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    startAngle: import_prop_types20.default.number,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    endAngle: import_prop_types20.default.number,
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]).isRequired,
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelGap: import_prop_types20.default.number,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
      valueOf: import_prop_types20.default.func.isRequired
    })]),
    min: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
      valueOf: import_prop_types20.default.func.isRequired
    })]),
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["time"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    startAngle: import_prop_types20.default.number,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    endAngle: import_prop_types20.default.number,
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]).isRequired,
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelGap: import_prop_types20.default.number,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
      valueOf: import_prop_types20.default.func.isRequired
    })]),
    min: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
      valueOf: import_prop_types20.default.func.isRequired
    })]),
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["utc"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    startAngle: import_prop_types20.default.number,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    endAngle: import_prop_types20.default.number,
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]).isRequired,
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelGap: import_prop_types20.default.number,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["linear"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    startAngle: import_prop_types20.default.number,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  })]).isRequired),
  /**
   * The array of series to display.
   * Each type of series has its own specificity.
   * Please refer to the appropriate docs page to learn more about it.
   */
  series: import_prop_types20.default.arrayOf(import_prop_types20.default.object),
  /**
   * If `true`, animations are skipped.
   * If unset or `false`, the animations respects the user's `prefers-reduced-motion` setting.
   */
  skipAnimation: import_prop_types20.default.bool,
  /**
   * The props for the slots.
   */
  slotProps: import_prop_types20.default.object,
  /**
   * Slots to customize charts' components.
   */
  slots: import_prop_types20.default.object,
  sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
  theme: import_prop_types20.default.oneOf(["dark", "light"]),
  title: import_prop_types20.default.string,
  /**
   * Defines the maximum distance between a scatter point and the pointer that triggers the interaction.
   * If set to `'item'`, the radius is the `markerSize`.
   * If `undefined`, the radius is assumed to be infinite.
   */
  voronoiMaxRadius: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["item"]), import_prop_types20.default.number]),
  /**
   * The width of the chart in px. If not defined, it takes the width of the parent element.
   */
  width: import_prop_types20.default.number,
  /**
   * The configuration of the x-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  xAxis: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["x"]),
    barGapRatio: import_prop_types20.default.number,
    categoryGapRatio: import_prop_types20.default.number,
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      type: import_prop_types20.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types20.default.string,
      values: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number, import_prop_types20.default.string]).isRequired)
    }), import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    groups: import_prop_types20.default.arrayOf(import_prop_types20.default.shape({
      getValue: import_prop_types20.default.func.isRequired,
      tickLabelStyle: import_prop_types20.default.object,
      tickSize: import_prop_types20.default.number
    })),
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["band"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelMinGap: import_prop_types20.default.number,
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["x"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      type: import_prop_types20.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types20.default.string,
      values: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number, import_prop_types20.default.string]).isRequired)
    }), import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    groups: import_prop_types20.default.arrayOf(import_prop_types20.default.shape({
      getValue: import_prop_types20.default.func.isRequired,
      tickLabelStyle: import_prop_types20.default.object,
      tickSize: import_prop_types20.default.number
    })),
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["point"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelMinGap: import_prop_types20.default.number,
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["x"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["log"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelMinGap: import_prop_types20.default.number,
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["x"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    constant: import_prop_types20.default.number,
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["symlog"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelMinGap: import_prop_types20.default.number,
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["x"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["pow"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelMinGap: import_prop_types20.default.number,
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["x"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["sqrt"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelMinGap: import_prop_types20.default.number,
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["x"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
      valueOf: import_prop_types20.default.func.isRequired
    })]),
    min: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
      valueOf: import_prop_types20.default.func.isRequired
    })]),
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["time"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelMinGap: import_prop_types20.default.number,
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["x"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
      valueOf: import_prop_types20.default.func.isRequired
    })]),
    min: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
      valueOf: import_prop_types20.default.func.isRequired
    })]),
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["utc"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelMinGap: import_prop_types20.default.number,
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["x"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    height: import_prop_types20.default.number,
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["bottom", "none", "top"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["linear"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelMinGap: import_prop_types20.default.number,
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func
  })]).isRequired),
  /**
   * The configuration of the y-axes.
   * If not provided, a default axis config is used.
   * An array of [[AxisConfig]] objects.
   */
  yAxis: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["y"]),
    barGapRatio: import_prop_types20.default.number,
    categoryGapRatio: import_prop_types20.default.number,
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      type: import_prop_types20.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types20.default.string,
      values: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number, import_prop_types20.default.string]).isRequired)
    }), import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    groups: import_prop_types20.default.arrayOf(import_prop_types20.default.shape({
      getValue: import_prop_types20.default.func.isRequired,
      tickLabelStyle: import_prop_types20.default.object,
      tickSize: import_prop_types20.default.number
    })),
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["band"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func,
    width: import_prop_types20.default.number
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["y"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      type: import_prop_types20.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types20.default.string,
      values: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number, import_prop_types20.default.string]).isRequired)
    }), import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    groups: import_prop_types20.default.arrayOf(import_prop_types20.default.shape({
      getValue: import_prop_types20.default.func.isRequired,
      tickLabelStyle: import_prop_types20.default.object,
      tickSize: import_prop_types20.default.number
    })),
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["point"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func,
    width: import_prop_types20.default.number
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["y"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["log"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func,
    width: import_prop_types20.default.number
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["y"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    constant: import_prop_types20.default.number,
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["symlog"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func,
    width: import_prop_types20.default.number
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["y"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["pow"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func,
    width: import_prop_types20.default.number
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["y"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["sqrt"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func,
    width: import_prop_types20.default.number
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["y"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
      valueOf: import_prop_types20.default.func.isRequired
    })]),
    min: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
      valueOf: import_prop_types20.default.func.isRequired
    })]),
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["time"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func,
    width: import_prop_types20.default.number
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["y"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
      valueOf: import_prop_types20.default.func.isRequired
    })]),
    min: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.shape({
      valueOf: import_prop_types20.default.func.isRequired
    })]),
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["utc"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func,
    width: import_prop_types20.default.number
  }), import_prop_types20.default.shape({
    axis: import_prop_types20.default.oneOf(["y"]),
    classes: import_prop_types20.default.object,
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    disableLine: import_prop_types20.default.bool,
    disableTicks: import_prop_types20.default.bool,
    domainLimit: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["nice", "strict"]), import_prop_types20.default.func]),
    hideTooltip: import_prop_types20.default.bool,
    id: import_prop_types20.default.oneOfType([import_prop_types20.default.number, import_prop_types20.default.string]),
    ignoreTooltip: import_prop_types20.default.bool,
    label: import_prop_types20.default.string,
    labelStyle: import_prop_types20.default.object,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number,
    offset: import_prop_types20.default.number,
    position: import_prop_types20.default.oneOf(["left", "none", "right"]),
    reverse: import_prop_types20.default.bool,
    scaleType: import_prop_types20.default.oneOf(["linear"]),
    slotProps: import_prop_types20.default.object,
    slots: import_prop_types20.default.object,
    sx: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.func, import_prop_types20.default.object, import_prop_types20.default.bool])), import_prop_types20.default.func, import_prop_types20.default.object]),
    tickInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.array, import_prop_types20.default.func]),
    tickLabelInterval: import_prop_types20.default.oneOfType([import_prop_types20.default.oneOf(["auto"]), import_prop_types20.default.func]),
    tickLabelPlacement: import_prop_types20.default.oneOf(["middle", "tick"]),
    tickLabelStyle: import_prop_types20.default.object,
    tickMaxStep: import_prop_types20.default.number,
    tickMinStep: import_prop_types20.default.number,
    tickNumber: import_prop_types20.default.number,
    tickPlacement: import_prop_types20.default.oneOf(["end", "extremities", "middle", "start"]),
    tickSize: import_prop_types20.default.number,
    valueFormatter: import_prop_types20.default.func,
    width: import_prop_types20.default.number
  })]).isRequired),
  /**
   * The configuration of the z-axes.
   */
  zAxis: import_prop_types20.default.arrayOf(import_prop_types20.default.shape({
    colorMap: import_prop_types20.default.oneOfType([import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      type: import_prop_types20.default.oneOf(["ordinal"]).isRequired,
      unknownColor: import_prop_types20.default.string,
      values: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number, import_prop_types20.default.string]).isRequired)
    }), import_prop_types20.default.shape({
      color: import_prop_types20.default.oneOfType([import_prop_types20.default.arrayOf(import_prop_types20.default.string.isRequired), import_prop_types20.default.func]).isRequired,
      max: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      min: import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]),
      type: import_prop_types20.default.oneOf(["continuous"]).isRequired
    }), import_prop_types20.default.shape({
      colors: import_prop_types20.default.arrayOf(import_prop_types20.default.string).isRequired,
      thresholds: import_prop_types20.default.arrayOf(import_prop_types20.default.oneOfType([import_prop_types20.default.instanceOf(Date), import_prop_types20.default.number]).isRequired).isRequired,
      type: import_prop_types20.default.oneOf(["piecewise"]).isRequired
    })]),
    data: import_prop_types20.default.array,
    dataKey: import_prop_types20.default.string,
    id: import_prop_types20.default.string,
    max: import_prop_types20.default.number,
    min: import_prop_types20.default.number
  }))
} : void 0;

// node_modules/@mui/x-charts/esm/ChartsBrushOverlay/ChartsBrushOverlay.js
init_extends();
var React34 = __toESM(require_react(), 1);

// node_modules/@mui/x-charts/esm/ChartsBrushOverlay/ChartsBrushOverlay.classes.js
var brushOverlayClasses = generateUtilityClasses("MuiChartsBrushOverlay", ["root", "rect", "x", "y"]);

// node_modules/@mui/x-charts/esm/ChartsBrushOverlay/ChartsBrushOverlay.js
var import_jsx_runtime30 = __toESM(require_jsx_runtime(), 1);
function BrushRect(props) {
  return (0, import_jsx_runtime30.jsx)("rect", _extends({
    className: brushOverlayClasses.rect,
    strokeWidth: 1,
    fillOpacity: 0.2,
    pointerEvents: "none"
  }, props));
}
function ChartsBrushOverlay(props) {
  const store = useStore();
  const drawingArea = useSelector(store, selectorChartDrawingArea);
  const theme = useTheme();
  const brushStartX = useSelector(store, selectorBrushStartX);
  const brushStartY = useSelector(store, selectorBrushStartY);
  const brushCurrentX = useSelector(store, selectorBrushCurrentX);
  const brushCurrentY = useSelector(store, selectorBrushCurrentY);
  const brushConfig = useSelector(store, selectorBrushConfig);
  if (brushStartX === null || brushStartY === null || brushCurrentX === null || brushCurrentY === null) {
    return null;
  }
  const {
    left,
    top,
    width,
    height
  } = drawingArea;
  const clampX = (x) => Math.max(left, Math.min(left + width, x));
  const clampY = (y) => Math.max(top, Math.min(top + height, y));
  const startX = clampX(brushStartX);
  const startY = clampY(brushStartY);
  const currentX = clampX(brushCurrentX);
  const currentY = clampY(brushCurrentY);
  const rectColor = theme.palette.mode === "light" ? theme.palette.common.black : theme.palette.common.white;
  if (brushConfig === "xy") {
    const rectWidth2 = currentX - startX;
    const rectHeight = currentY - startY;
    return (0, import_jsx_runtime30.jsx)("g", {
      className: clsx_default(brushOverlayClasses.root, brushOverlayClasses.x, brushOverlayClasses.y),
      children: (0, import_jsx_runtime30.jsx)(BrushRect, _extends({
        fill: rectColor,
        x: rectWidth2 >= 0 ? startX : currentX,
        y: rectHeight >= 0 ? startY : currentY,
        width: Math.abs(rectWidth2),
        height: Math.abs(rectHeight)
      }, props))
    });
  }
  if (brushConfig === "y") {
    const minY = Math.min(startY, currentY);
    const maxY = Math.max(startY, currentY);
    const rectHeight = maxY - minY;
    return (0, import_jsx_runtime30.jsx)("g", {
      className: clsx_default(brushOverlayClasses.root, brushOverlayClasses.y),
      children: (0, import_jsx_runtime30.jsx)(BrushRect, _extends({
        fill: rectColor,
        x: left,
        y: minY,
        width,
        height: rectHeight
      }, props))
    });
  }
  const minX = Math.min(startX, currentX);
  const maxX = Math.max(startX, currentX);
  const rectWidth = maxX - minX;
  return (0, import_jsx_runtime30.jsx)("g", {
    className: clsx_default(brushOverlayClasses.root, brushOverlayClasses.x),
    children: (0, import_jsx_runtime30.jsx)(BrushRect, _extends({
      fill: rectColor,
      x: minX,
      y: top,
      width: rectWidth,
      height
    }, props))
  });
}
export {
  AXIS_LABEL_DEFAULT_HEIGHT,
  AnimatedArea,
  AnimatedLine,
  AreaElement,
  AreaPlot,
  BAR_CHART_PLUGINS,
  BarChart,
  BarElement,
  BarLabel,
  BarPlot,
  ChartContainer,
  ChartDataProvider,
  ChartsAxis,
  ChartsAxisHighlight,
  ChartsAxisHighlightPath,
  ChartsAxisTooltipContent,
  ChartsBrushOverlay,
  ChartsClipPath,
  ChartsGrid,
  ChartsItemTooltipContent,
  ChartsLabel,
  ChartsLabelMark,
  ChartsLegend,
  ChartsLocalizationProvider,
  ChartsReferenceLine,
  ChartsSurface,
  ChartsText,
  ChartsTooltip,
  ChartsTooltipCell,
  ChartsTooltipContainer,
  ChartsTooltipPaper,
  ChartsTooltipRow,
  ChartsTooltipTable,
  ChartsWrapper,
  ChartsXAxis,
  ChartsYAxis,
  ContinuousColorLegend,
  DEFAULT_AXIS_SIZE_HEIGHT,
  DEFAULT_AXIS_SIZE_WIDTH,
  DEFAULT_MARGINS,
  DEFAULT_RADIUS_AXIS_KEY,
  DEFAULT_ROTATION_AXIS_KEY,
  DEFAULT_X_AXIS_KEY,
  DEFAULT_Y_AXIS_KEY,
  Gauge,
  GaugeContainer,
  GaugeReferenceArc,
  GaugeValueArc,
  GaugeValueText,
  LINE_CHART_PLUGINS,
  LineChart,
  LineElement,
  LineHighlightElement,
  LineHighlightPlot,
  LinePlot,
  MarkElement,
  MarkPlot,
  PIE_CHART_PLUGINS,
  PieArc,
  PieArcLabel,
  PieArcLabelPlot,
  PieArcPlot,
  PieChart,
  PiePlot,
  PiecewiseColorLegend,
  RADAR_PLUGINS,
  RadarAxis,
  RadarAxisHighlight,
  RadarChart,
  RadarDataProvider,
  RadarGrid,
  RadarMetricLabels,
  RadarSeriesArea,
  RadarSeriesMarks,
  RadarSeriesPlot,
  SCATTER_CHART_PLUGINS,
  Scatter,
  ScatterChart,
  ScatterMarker,
  ScatterPlot,
  SparkLineChart,
  Toolbar,
  ToolbarButton,
  Unstable_RadarChart,
  Unstable_RadarDataProvider,
  areaElementClasses,
  axisClasses,
  barClasses,
  barElementClasses,
  barLabelClasses,
  bluePalette,
  bluePaletteDark,
  bluePaletteLight,
  blueberryTwilightPalette,
  blueberryTwilightPaletteDark,
  blueberryTwilightPaletteLight,
  brushOverlayClasses,
  chartsAxisClasses,
  chartsAxisHighlightClasses,
  chartsGridClasses,
  chartsToolbarClasses,
  chartsTooltipClasses,
  cheerfulFiestaPalette,
  cheerfulFiestaPaletteDark,
  cheerfulFiestaPaletteLight,
  continuousColorLegendClasses,
  cyanPalette,
  cyanPaletteDark,
  cyanPaletteLight,
  gaugeClasses,
  getAreaElementUtilityClass,
  getAxisHighlightUtilityClass,
  getAxisUtilityClass,
  getBarElementUtilityClass,
  getBarLabelUtilityClass,
  getBarUtilityClass,
  getChartsGridUtilityClass,
  getChartsTooltipUtilityClass,
  getGaugeUtilityClass,
  getHighlightElementUtilityClass,
  getLineElementUtilityClass,
  getMarkElementUtilityClass,
  getPieArcLabelUtilityClass,
  getPieArcUtilityClass,
  getPieCoordinates,
  getReferenceLineUtilityClass,
  getValueToPositionMapper,
  greenPalette,
  greenPaletteDark,
  greenPaletteLight,
  isBarSeries,
  isDefaultizedBarSeries,
  labelClasses,
  labelGradientClasses,
  labelMarkClasses,
  legendClasses,
  lineElementClasses,
  lineHighlightElementClasses,
  mangoFusionPalette,
  mangoFusionPaletteDark,
  mangoFusionPaletteLight,
  markElementClasses,
  orangePalette,
  orangePaletteDark,
  orangePaletteLight,
  pieArcClasses,
  pieArcLabelClasses,
  pieClasses,
  piecewiseColorDefaultLabelFormatter,
  piecewiseColorLegendClasses,
  pinkPalette,
  pinkPaletteDark,
  pinkPaletteLight,
  purplePalette,
  purplePaletteDark,
  purplePaletteLight,
  radarSeriesPlotClasses,
  rainbowSurgePalette,
  rainbowSurgePaletteDark,
  rainbowSurgePaletteLight,
  redPalette,
  redPaletteDark,
  redPaletteLight,
  referenceLineClasses,
  scatterClasses,
  strawberrySkyPalette,
  strawberrySkyPaletteDark,
  strawberrySkyPaletteLight,
  useAnimate,
  useAnimateArea,
  useAnimateBar,
  useAnimateBarLabel,
  useAnimateLine,
  useAnimatePieArc,
  useAnimatePieArcLabel,
  useAxesTooltip,
  useAxisTooltip,
  useBarSeries,
  useBarSeriesContext,
  useBrush,
  useChartApiContext,
  useChartCartesianAxis,
  useChartClosestPoint,
  useChartGradientId,
  useChartGradientIdObjectBound,
  useChartHighlight,
  useChartId,
  useChartInteraction,
  useChartPolarAxis,
  useChartRootRef,
  useChartZAxis,
  useChartsLocalization,
  useDrawingArea,
  useGaugeState,
  useItemHighlighted,
  useItemHighlightedGetter,
  useItemTooltip,
  useLegend,
  useLineSeries,
  useLineSeriesContext,
  useMouseTracker,
  usePieSeries,
  usePieSeriesContext,
  useRadarAxis,
  useRadarItemTooltip,
  useRadarSeries,
  useRadarSeriesContext,
  useRadiusAxes,
  useRadiusAxis,
  useRadiusScale,
  useRotationAxes,
  useRotationAxis,
  useRotationScale,
  useScatterSeries,
  useScatterSeriesContext,
  useSeries,
  useSvgRef,
  useUtilityClasses,
  useXAxes,
  useXAxis,
  useXColorScale,
  useXScale,
  useYAxes,
  useYAxis,
  useYColorScale,
  useYScale,
  useZAxes,
  useZAxis,
  useZColorScale,
  yellowPalette,
  yellowPaletteDark,
  yellowPaletteLight
};
/*! Bundled license information:

@mui/x-charts/esm/index.js:
  (**
   * @mui/x-charts v8.15.0
   *
   * @license MIT
   * This source code is licensed under the MIT license found in the
   * LICENSE file in the root directory of this source tree.
   *)
*/
//# sourceMappingURL=@mui_x-charts.js.map
